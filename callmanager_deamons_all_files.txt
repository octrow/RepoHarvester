## callmanager_deamons
### .gitignore
#Колл файлы 
/tmp
/tmp_audio
/worker_synteth/*.log
steps.log
### end of file
### test.php
<?php 
    date_default_timezone_set('Asia/Aqtau');
    $config         = include "config.php";

    function hourComplete($config, $company_id)
    {
        $link = 0;
        $flag = true;
        while ($flag) {
            $link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']); 
            if (mysqli_connect_errno()) {
                $flag = true;
                sleep(10);
            } else {
                $flag = false;
            }
        }
        
        mysqli_set_charset($link, "utf8");

        $sql = "UPDATE xm9wl_calls_batches 
                   SET try  = 0
                WHERE company_id = " . $company_id;
        mysqli_query($link, $sql);

        $sql = "UPDATE xm9wl_calls_batches
                   SET status  = 'completed'
                WHERE company_id = " . $company_id . "
                  AND status in ('new', 'recall', 'sync', 'in_sync', 'wait_sync')";
        mysqli_query($link, $sql);  

        $link->close();
    }

    $companies = array(array('id' => 15259, 'end_datetime' => '2023-04-11 20:00:00') 
                      ,array('id' => 15258, 'end_datetime' => '2023-04-11 15:00:00') 
                      ,array('id' => 15257, 'end_datetime' => '2023-04-11 15:42:00') 
                        );

    $current_hour = new DateTime(date('Y-m-d H:i:s'));

    foreach ($companies as $key => $value){
        $com_hour = new DateTime($value['end_datetime']); 
        if ($current_hour > $com_hour) {
            hourComplete($config,  $value['id']);
        }
    } 

    die;

// sql = f"""update cybernet_calls.xm9wl_calls_batches set try = 0
// where status not in ('completed', 'canceled')"""


// sql2 = f"""update cybernet_calls.xm9wl_calls_batches set status = 'completed'
// where status in ('new', 'recall')"""





    echo $sleep_time = 1000000 - (date('H') - 9)*91000;
    echo 'asdf' . 1;
    usleep(2000000);
    echo 2;
    die;
    $time_start    = microtime(true);

    $content       = file_get_contents('http://185.5.207.6:5000/static/audio/kz-kaspi-backend-omilia/7856434.zip');

    $uploadFile    = "needed_delete_temp.zip";

    file_put_contents($uploadFile, $content);

    echo('Операция заняло микросек :' . (microtime(true) - $time_start) . "\n" );


	die;

	include_once("worker_synteth/classes/Connection.php");
    $con = new Connection("test");

    $postdata = array('http' =>
            array(
                'method'  => 'Get',
                'header'  => 'Content-Type: application/json'));

    $context  = stream_context_create( $postdata );

    $result = $con->getBatches("http://localhost/scriber/index.php", $context);
    
    print_r($result);

	die;

	$config  		= include "config.php";
	$config_paths 	= include "config_paths.php";
	
	include_once('helpers/upload_synt.php');
	include_once('helpers/transfer_synt.php');



	$postdata = array('http' =>
   		array(
        	'method'  => 'POST',
	        'header'  => 'Content-Type: application/json',
	        'content' => '
	        				 {"688570":
								        {"rl_inputAmount":{"text":"151","prime":"151","result":"151"},
								         "rl_clientName":{"text":"Иван Иванов","prime":"иван Иванов","result":"ив+ан Ив+анов"},
								         "rl_thirdPersonName":{"text":"Кайрат Оспанов","prime":"гайрат Оспанов","result":"гайр+ат Осп+анов"}}}

	        			'));

	$url 	  = "http://178.154.206.87:4568/sintez_endpoint";

	$context  = stream_context_create( $postdata );
	$result   = file_get_contents( $url, false, $context );



	$response = json_decode( $result, true );
	print_r($response);

?>
### end of file
### testing.php
<?php

date_default_timezone_set('Asia/Aqtau');

$config = include('config.php');
$pull = array();
for ($i=0; $i < $config['max_array_size']; $i++) { 
	$pull[] = 0;
}




### end of file
### readme
call_deamon 
	- run_file.php 				 		create calls files
	- run_file_close_calls.php 			close long time calls more 5 min
	- run_file_recall.php               update recall status -> new


Тестирование функциональности 
### end of file
### recall.log
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: Connection timed out
2020-10-13 22:45:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:48:53|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:51:53|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:55:08|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:58:16|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:01:33|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:04:39|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:07:57|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:11:15|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:14:22|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:17:39|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:20:57|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:24:18|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:27:44|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:31:01|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:34:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:37:54|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:41:22|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:44:36|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:47:54|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:51:14|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:54:31|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:57:48|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:01:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:04:16|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:07:25|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:19:33|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:22:38|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:25:43|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:28:43|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:31:43|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:34:44|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:37:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:40:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:43:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:17:41|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:21:21|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:25:01|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:28:41|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:32:21|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 21:06:49|Connect failed: Connection timed out
2021-03-10 05:42:55|Connect failed: Connection timed out
2021-03-10 06:01:56|Connect failed: Connection timed out
2021-03-10 06:05:36|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:08:57|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:12:19|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:15:49|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:19:23|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:22:49|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:26:17|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:26:35|Connect failed: No route to host
2021-03-10 09:29:59|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:33:20|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-04-05 19:22:19|Connect failed: Connection timed out
2021-04-05 19:38:29|Connect failed: Connection timed out
2021-04-05 19:45:32|Connect failed: Connection timed out
2021-04-05 19:55:48|Connect failed: Connection timed out

### end of file
### run_file_update_sms.php
<?php
// sudo apt-get install php-xml
$config = include('config.php');

function getSMSlist($config){
	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], 
			$config['username'], 
			$config['password'], 
			$config['database']);	
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}

	$sql = 'SELECT * FROM xm9wl_calls_sms WHERE NOT status IN ("10", "11")';
	$result = mysqli_query($link, $sql);
	$result = mysqli_fetch_all($result, MYSQLI_ASSOC);

	$link->close();

	return $result;
}

function getStatusRequest($config, $smsID){

	$url = "http://kazinfoteh.org:9507/api?action=getmessagebyid&username=" . $config['user_sms'] . 
																"&password=" . $config['pass_sms'] . "&msgID=" . $smsID;
	
	$getdata = array('http' =>
	    array(
	        'method'  => 'GET',
	        'header'  => 'Content-Type: text/html; charset=utf-8',
	        'content' => '' ));

   	$context 	= stream_context_create($getdata);
	$result 	= file_get_contents($url, false, $context);
	$xml 		= simplexml_load_string($result);

	$res = array();
	$res['state'] 		 = $xml->data->state;
	$res['originator'] 	 = $xml->data->originator;
	$res['senttime'] 	 = $xml->data->senttime;
	$res['receivedtime'] = $xml->data->receivedtime;
	$res['creationtime'] = $xml->data->creationtime;
	$res['messagedata']  = $xml->data->messagedata;


	return $res;
}

function setStatus($config, $smsID, $result){
	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], 
			$config['username'], 
			$config['password'], 
			$config['database']);
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}

	mysqli_query($link, "SET NAMES utf8");

	$sql = "Insert into xm9wl_calls_sms_details(`sms_id`, `originator`, `senttime`, `receivedtime`, `creationtime`, `messagedata`) 
				Values(
				'" . $smsID . "',
				'" . $result['originator'] .  "',
				'" . $result['senttime'] .  "',
				'" . $result['receivedtime'] .  "',
				'" . $result['creationtime'] .  "',
				'" . $result['messagedata'] .  "')";

	mysqli_query($link, $sql);


	$sql = "UPDATE xm9wl_calls_sms 
			   SET status = '" . $result['state'] . "' 
			 WHERE sms_id  = '" . $smsID . "'" ;

	mysqli_query($link, $sql);


	$link->close();
}
 
//setStatus($config, '8719FCE0-2BE0-4AAC-ABDB-FA1774FFAF91', 'Message accepted for delivery');

//getStatusRequest($config, '8719FCE0-2BE0-4AAC-ABDB-FA1774FFAF91');
//die;

$list_of_sms = getSMSlist($config);

foreach ($list_of_sms as $key => $value) {
	$result = getStatusRequest($config, $value['sms_id']);
	setStatus($config, $value['sms_id'], $result);
	if (($key+1)%1000 == 0){
		sleep(10);
	}
}

### end of file
### calls.sql

ALTER TABLE `xm9wl_calls_batches` ADD `try` INT NOT NULL DEFAULT '0' AFTER `language`; 
### end of file
### run_file_recall.php
<?php
$config = include('config.php');

while (1==1) {
	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);

	if (mysqli_connect_errno()) {
	    $fd = fopen("recall.log", 'a');
		$str = "Connect failed: " . mysqli_connect_error() . "\n";
		fwrite($fd, date("Y-m-d H:i:s") . '|' . $str);
		fclose($fd);
		//$link->close();
		sleep($config['recall_sleep_time']);
		continue;
	} elseif ($config['debug'] == 1) {
		print_r("Normal connection to database \n");
	}
 
	$sql = 'SELECT 
				c.id
			FROM xm9wl_calls_batches b
			JOIN xm9wl_calls_companies c ON b.company_id = c.id
			WHERE 
				c.status = "new"
			GROUP BY c.id
			HAVING (SUM(b.status = "new") + SUM(b.status = "in_progress") + SUM(b.status = "in_pull")) = 0
			   AND SUM(b.status = "recall") > 0';
	try {
		$result = mysqli_query($link, $sql);
		$result = mysqli_fetch_all($result, MYSQLI_ASSOC);

		if (count($result) == 0){
			$link->close();	
			sleep($config['recall_sleep_time']);
			continue;
		} 

	// Обновление статуса звонков на перезвон
		foreach ($result as $key => $value) {
			$sql = 'UPDATE 
						xm9wl_calls_batches
					SET status = if (try <= 0, "completed", "new")
					WHERE status = "recall"
					  AND company_id = ' . $value['id'];
			mysqli_query($link, $sql);		  
		}

		if ($config['debug'] == 1) {
			print_r("SQL requests successfully, rows count" . count($result) . "\n");
		}

		$link->close();	
		
	} catch (Exception $e) {

		if ($config['debug'] == 1) {
			print_r("SQL requests ERROR \n");	
		}

 		$fd = fopen("recall.log", 'a');
		$str = "SQL requests ERROR : \n";
		fwrite($fd, date("Y-m-d H:i:s") . '|' . $str);
		fclose($fd);
	}

	
	sleep($config['recall_sleep_time']);
}

### end of file
### run_file_createdetailsfiles.php
<?php

	$key_hash   = substr(hash('md5', date('Y-m-d')), 0, 10);
	
	
	$Year  = date("Y");
	$Month = date("m");

	$report_date = date('Y-m-d', mktime(0, 0, 0, $Month - 1, 1, $Year));
	// echo $report_date;
	// //$report_date = '2022-01-01';
 
 	// 	die;

	$postdata = array('http' =>
	    array(
	        'method'  => 'GET',
	        'header'  => 'Content-Type: application/json',
	        'content' => ''));


	$context = stream_context_create($postdata);


    echo 'https://account.cybernet.kz/index.php/dashboard?task=details.generateByDate&date=' . $report_date . "&key=" . $key_hash;

    die;
	$result = file_get_contents('https://account.cybernet.kz/index.php/dashboard?task=details.generateByDate&date=' . $report_date . "&key=" . $key_hash , false, $context);


?>

### end of file
### config_worker.php
<?php

$params = array(
        'url_transcriber'  => 'https://gtrace.info/naming/transciber/index.php', // host - транскрайбера 
        'url_synteth'      => array(
                                    //'http://178.154.206.87:5000/sintez_endpoint',
                                    'http://78.140.245.103:5000/sintez_endpoint',
                                    'http://185.5.206.81:5000/sintez_endpoint',
                                    'http://78.140.246.3:5000/sintez_endpoint',
                                    'http://78.140.246.116:5000/sintez_endpoint',
                                    'http://185.5.207.7:5000/sintez_endpoint',
                                    'http://185.5.207.6:5000/sintez_endpoint'
                                    ), // host - синтез 

        'temp_audio'       => '/home/evotech-adm/for_sinth', // путь временного скачивания и распаковки архива
        'temp_path'        => '/home/evotech-adm/for_sinth',
        'show_info'        => true, // показывать информацию  
        'limit'            => 250,
        'host'             => 'kz-prod-backend-omilia',
    );

// определение основного языка
$list_of_uz_servers = array('uz-prod-backend-cyber'
                            , 'uz-prod-backend-cyber02'
                            , 'uz-prod-backend-cyber03'
                            , 'uz-prod-backend-cyber04'
                            , 'uz-prod-backend-cyber05'
                            , 'uz-prod-backend-cyber06'
                            , 'uz-prod-backend-cyber07'
                            , 'uz-prod-backend-cyber08'
                            , 'uz-prod-backend-cyber09'
                            , 'uz-prod-backend-cyber10'
                            , 'uz-prod-backend-cyber11'
                            , 'uz-prod-backend-cyber12');

$list_of_kg_servers = array('kg-prod-backend01-cyber'
                            , 'kg-prod-backend02-cyber'
                            , 'kg-prod-backend03-cyber'
                            , 'kg-prod-backend04-cyber');

if (in_array(gethostname(), $list_of_uz_servers)){
    $params['main_lang']            = "uz";
    // sintez

    $params['url_transcriber']      = "https://naming.cyber-net.uz/transciber/index.php";
    $params['url_synteth']          = array('http://176.96.241.92:5000/sintez_endpoint');
    

} elseif (in_array(gethostname(), $list_of_kg_servers)){
    $params['main_lang']            = "kg";
    // sintez

    $params['url_transcriber']      = "http://85.198.89.52/transciber/index.php";
    $params['url_synteth']          = array('http://195.38.164.122:5000/sintez_endpoint');
    

} else {
    $params['main_lang'] = "kz";
}

$params['lang_settings']     = array('uz' => array('male_ru_', 'female_ru_', 'male_uz_', 'female_uz_')
                                ,'kz' => array('male_ru_', 'female_ru_', 'male_kz_', 'female_kz_')
                                ,'kg' => array('male_ru_', 'female_ru_', 'male_kg_', 'female_kg_')
                            );

$params['array_gender_lang'] = array('uz' =>  array('male_ru', 'female_ru', 'male_uz', 'female_uz')
                                ,'kz' =>  array('male_ru', 'female_ru', 'male_kz', 'female_kz')
                                ,'kg' => array('male_ru', 'female_ru', 'male_kg', 'female_kg'));


if (gethostname() == "d40892.acod.regrucolo.ru") {
    
    $params['host'] = '';

} elseif (gethostname() == "kaspi.cybernet.pbx") {
    
    $params['host'] = 'kz-kaspi-backend-omilia';

} elseif (gethostname() == "dan-Lenovo-G50-80") {
    
    $params['host'] = '';

} elseif (gethostname() == "lpdan") {
    
    $params['host']             = 'test4';
   
    $params['temp_path']        = '/home/dan/Desktop/projects/work/callmanager_deamons/tmp';
    $params['temp_audio']       = '/home/dan/Desktop/projects/work/callmanager_deamons/tmp_audio';
    $params['url_transcriber']  = 'http://localhost:81/scriber/index.php';
        
    $params['limit']            = 5;  
    //$params['url_synteth']      = 'http://178.154.206.87:5000/sintez_endpoint';
    //$params['url_synteth']      = 'http://78.140.246.3:5000/sintez_endpoint';

    $params['show_info']        = true;


} elseif (gethostname() == "MacBook-Pro-Rashid.local") {

    $params['host'] = '';

} elseif (gethostname() == "DESKTOP-0FTMEE5") {

    $params['host'] = '';

}  elseif (gethostname() == "AsteriskTest") {

    $params['host']             = 'webserver';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-dev-backend-cyber") {

    $params['host']             = 'ubuntu22';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend02-cyber") {

    $params['host']             = 'backend02';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend05-cyber") {

    $params['host']             = 'backend05';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend04-cyber") {

    $params['host']             = 'backend04';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend06-cyber") {

    $params['host']             = 'backend06';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend10-cyber") {

    $params['host']             = 'backend10';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend11-cyber") {

    $params['host']             = 'backend11';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend09-cyber") {

    $params['host']             = 'backend09';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend13-cyber") {

    $params['host']             = 'backend13';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend07-cyber") {

    $params['host']             = 'backend07';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend08-cyber") {

    $params['host']             = 'backend08';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend12-cyber") {

    $params['host']             = 'backend12';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend14-cyber") {

    $params['host']             = 'backend14';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend15-cyber") {

    $params['host']             = 'backend15';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend16-cyber") {

    $params['host']             = 'backend16';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend17-cyber") {

    $params['host']             = 'backend17';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend18-cyber") {

    $params['host']             = 'backend18';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend19-cyber") {

    $params['host']             = 'backend19';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend20-cyber") {

    $params['host']             = 'backend20';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend21-cyber") {

    $params['host']             = 'backend21';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend22-cyber") {

    $params['host']             = 'backend22';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend23-cyber") {

    $params['host']             = 'backend23';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend28-cyber") {

    $params['host']             = 'backend28';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend29-cyber") {

    $params['host']             = 'backend29';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend30-cyber") {

    $params['host']             = 'backend30';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend31-cyber") {

    $params['host']             = 'backend31';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend37-cyber") {

    $params['host']             = 'backend37';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend38-cyber") {

    $params['host']             = 'backend38';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend39-cyber") {

    $params['host']             = 'backend39';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend40-cyber") {

    $params['host']             = 'backend40';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend41-cyber") {

    $params['host']             = 'backend41';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend42-cyber") {

    $params['host']             = 'backend42';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend43-cyber") {

    $params['host']             = 'backend43';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend44-cyber") {

    $params['host']             = 'backend44';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-prod-backend45-cyber") {

    $params['host']             = 'backend45';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "cyber-nfs-test-server") {

    $params['host']             = 'nfsserver';
   
    $params['temp_path']        = '/home/cybernet-adm//sintez/tmp';
    $params['temp_audio']       = '/home/cybernet-adm//sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kz-backend-NLS-physic") {

    $params['host']             = 'backendNLS';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber") {
    
    $params['host']             = 'backend_uz01';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;


} elseif (gethostname() == "uz-prod-backend-cyber02") {

    $params['host']             = 'backend_uz02';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;


} elseif (gethostname() == "uz-prod-backend-cyber03") {

    $params['host']             = 'backend_uz03';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;


} elseif (gethostname() == "uz-prod-backend-cyber04") {

    $params['host']             = 'backend_uz04';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber05") {

    $params['host']             = 'backend_uz05';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber06") {

    $params['host']             = 'backend_uz06';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber07") {

    $params['host']             = 'backend_uz07';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber08") {

    $params['host']             = 'backend_uz08';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber08") {

    $params['host']             = 'backend_uz09';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber10") {

    $params['host']             = 'backend_uz10';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber11") {

    $params['host']             = 'backend_uz11';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "uz-prod-backend-cyber12") {

    $params['host']             = 'backend_uz12';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "kg-prod-backend01-cyber") {

    $params['host']             = 'backend_kg01';
   
    $params['temp_path']        = '/home/user/SCRIPTS/sintez/tmp';
    $params['temp_audio']       = '/home/user/SCRIPTS/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

} elseif (gethostname() == "worker-builder") {

    $params['host']             = 'worker-builder';
   
    $params['temp_path']        = '/opt/sounds_test/sintez/tmp';
    $params['temp_audio']       = '/opt/sounds_test/sintez/tmp_audio';
        
    $params['limit']            = 250;  

    $params['show_info']        = false;

}


return $params;

?>
### end of file
### run_file.php
<?php

date_default_timezone_set('Asia/Aqtau');

$config = include('config.php');
$pull = array();
for ($i=0; $i < $config['max_array_size']; $i++) { 
	$pull[] = 0;
}

//------------------------------------------------------------------------------------------------------

$wavCounter = 1;
$i = 1;
$j = 0;
$t = 0;
$deamon_status = "";
$time_start    = microtime(true);

while (1 == 1){
    // config from bd 
    if ($config['config_from_BD']){
        updateConfigs($config);
    }
    //writeMiliseconds('updateConfigs');

	// statistica
	$company_count = 0;

	$deamon_status = "in_p";

	//  >20 : 00 sleep (1hours)
	//  <10 : 00 sleep (10minut)
	if (!isWorkTime() and $config['debug'] == 0){
		// Спать до следующего часа
		sleep((60 - date('i')) * 60);
        continue;
    }
    //writeMiliseconds('проверка рабочего времени');

	if ($j - $i < $config['pool_size'] + 1 
                and $j < $config['max_array_size'] - $config['max_lines_count'])	
	{

		$companies = getCompanies($config);
		//normalize($config, $companies);
		$company_count = count($companies);

		if (count($companies)>0){
            $current_hour = new DateTime(date('Y-m-d H:i:s'));

            foreach ($companies as $key => $value){
                $com_hour = new DateTime($value['end_datetime']); 
                if ($current_hour > $com_hour) {
                    hourComplete($config,  $value['id']);
                }
            }

			addPull($deamon_status, $config, $companies, $pull, $j);
		} 

	}

    //writeMiliseconds('addPull');
 
	// нужно распределить  ($j - $i) + 1 на группы 60 сек (1 сек группа)
	$count_can_make =  ($j - $i) + 1;
	
	// пропустить избыточное время 
	if ($count_can_make < 60)
		sleep(60 - $count_can_make);

	$last_time   = 60;
	$group_count = 0;
    $free_count  = $config['max_lines_count'] - countCalls($config);
    //writeMiliseconds('first free countCalls');
	// -------------------------------------------------------------------------------------------------------------
    //9 - 20 work hours
    $koef = 90; // 0.91 seconds for decrease sleep per hour
    $sleep_time_usleep = 1000000 - (date('H') - 9) * $koef * 1000;
    if (date('H') > 15){
        $sleep_time_usleep = 0;
    } 

	while ($j - $i >= 0)
	{
		if ($group_count > 0){
			// свободное линии
			

			if ($free_count > 0){

				$wavCounter = ($wavCounter) % $config['synteth_looper'] + 1;
				makeCall($config, $pull[$i], $i, $wavCounter);
				$i++;
                //writeMiliseconds('makeCall');
				$group_count--;
                $free_count--;
			} else {
                $free_count = $config['max_lines_count'] - countCalls($config);
                if ($free_count == 0){
                    sleep(1);
                    $free_count = $config['max_lines_count'] - countCalls($config);
                }
                //writeMiliseconds('free_count');
			}

			
		} else {
			if ($last_time == 0) $last_time = 1;

			$group_count = ceil($count_can_make / $last_time); 
			$count_can_make -= $group_count;
			$last_time --;
			usleep($sleep_time_usleep);
		}
	}

	if ($i == $j + 1 and $j >= $config['max_array_size'] - $config['max_lines_count']) {
		$i = 1;
		$j = 0; 
	}

	$deamon_status = "i=" . $i . "|j=" . $j . "|cmp c=" . $company_count . $deamon_status;

	completeCampaign($config);
	//writeMiliseconds('completeCampaign');

	setDeamonStatus($config, $deamon_status);
    //writeMiliseconds('deamon_status');

	//sleep($config['deamon_sleep_time']);
}

//------------------------------------------------------------------------------------------------------------------

function hourComplete($config, $company_id){
    $link = 0;
    $flag = true;
    while ($flag) {
        $link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']); 
        if (mysqli_connect_errno()) {
            $flag = true;
            sleep(10);
        } else {
            $flag = false;
        }
    }
    
    mysqli_set_charset($link, "utf8");

    $sql = "UPDATE xm9wl_calls_batches 
               SET try  = 0
            WHERE company_id = " . $company_id;
    mysqli_query($link, $sql);

    $sql = "UPDATE xm9wl_calls_batches
               SET status  = 'completed'
            WHERE company_id = " . $company_id . "
              AND status in ('new', 'recall', 'sync', 'in_sync', 'wait_sync', 'for_trans')";
    mysqli_query($link, $sql);  

    $link->close();
}

//------------------------------------------------------------------------------------------------------------------

function writeMiliseconds($str){
    $fd = fopen("closecall.log", 'a');
    global $time_start;
    fwrite($fd, 'Операция ' . $str . ' заняло микросек ' . (microtime(true) - $time_start) . "\n" );
    fclose($fd);
    $time_start = microtime(true);
}

//------------------------------------------------------------------------------------------------------------------
function updateConfigs(&$config){
    $link = 0;
    $flag = true;
    while ($flag) {
        $link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']); 
        if (mysqli_connect_errno()) {
            $flag = true;
            sleep(10);
        } else {
            $flag = false;
        }
    }

    $sql = 'SELECT * FROM xm9wl_calls_deamon_config LIMIT 1';

    mysqli_set_charset($link, "utf8");
    
    $result = mysqli_query($link, $sql);

    if ($result && mysqli_num_rows($result) > 0)
        $result = mysqli_fetch_all($result, MYSQLI_ASSOC);
    else {
        $result = array();
    }

    $link->close();

    if (count($result) > 0){

        $config['pool_size']                = $result[0]['pool_size'] * 2;
        $config['max_lines_count']	        = $result[0]['pool_size'];
        $config['max_array_size']           = $result[0]['max_array_size'];
        $config['call_close_sleep_time']    = $result[0]['call_close_sleep_time'];
        $config['call_close_minute_wait']   = $result[0]['call_close_minute_wait'];
        $config['recall_sleep_time']        = $result[0]['recall_sleep_time'];

    }

    //return $result;
}   

//------------------------------------------------------------------------------------------------------------------
function setDeamonStatus($config, $deamon_status)
{
	
	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);

	if (mysqli_connect_errno()) {
	    return;
	} else {
		// удалять вчерашний день до 11 $H = date('H');
		if (date('H') < 11) {
			$sql = 'DELETE FROM xm9wl_calls_deamons WHERE date_status < date(NOW())';
			mysqli_query($link, $sql);
		}

		$sql = 'INSERT INTO xm9wl_calls_deamons
				VALUES
					("run_file", now(), "' . mb_substr($deamon_status, 0, 300) . '")';
		mysqli_query($link, $sql);

		$link->close();
	}
}


function addPull(&$deamon_status, $config, $companies, &$pull, &$j)
{
    $link = 0;
    $flag = true;
    while ($flag) {
        $link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']); 
        mysqli_set_charset($link, "utf8");

        if (mysqli_connect_errno()) {
            $flag = true;
            sleep(10);
        } else {
            $flag = false;
        }
    }

    $hostname = ' and user_col2 = "' . gethostname() . '" ';

    $new_calls = array();
	foreach ($companies as $key => $value) {
	    $sql = '';

		$orderBy = "";
		if (gethostname() == "kaspi.cybernet.pbx") {
			$orderBy = " ORDER BY id asc ";
		}

		$sql = '(SELECT *, "' . $value['user_id'] .  '" AS userid
					     , "' . $value['name'] .  '" AS ccname
				         , "' . $value['user_name'] .  '" AS user_name
					 		  FROM (SELECT 
                                        * 
                                    FROM xm9wl_calls_batches 
                                    WHERE status = "new" 
                                      AND company_id = ' . $value['id'] 
                                    . $hostname    
                            		. $orderBy . ' ) dd LIMIT ' . $value['speed'] . ')';
                                    
        $result    = mysqli_query($link, $sql);
        $data      = mysqli_fetch_all($result, MYSQLI_ASSOC);

        $deamon_status .= ' | id=' . $value['id'] . '_c=' . count($data); 
        $new_calls = array_merge($new_calls, $data);
	}

    foreach ($companies as $key => $value) {
        updateStepStatus($link, $config, $value['id']);
    }

 	foreach ($new_calls as $key => $value) {
 		$j = $j + 1;
		$pull[$j] = $value;
		updatePullStatus($link, $config, $value);
 	}

    $link->close();
}


function countCalls($config)
{
	$dir = opendir($config['path_call_files']);
	$count = 0;
	while($file = readdir($dir)){
	    if($file == '.' || $file == '..' || is_dir($config['path_call_files'] . $file)){
	        continue;
	    }
	    $count++;
	}
	closedir($dir);
	return ($count - $config['system_files_count']);
}

function normalize($config, &$companies)
{

	// udalenie lishnih companii
	$k = 0;
	//foreach ($companies as $key => $value) {
		//if ($k <> $value['user_id']){
		//	$k = $value['user_id'];
		//} else unset($companies[$key]);
	//}

	$izb = 0;
	$total = 0;
	$total_rasp = 0;
	$count = 0;
	foreach ($companies as $key => $value) {
		$total = $total + $value['speed'];
	}

	// если есть избыток ускорять обзвон?
	//$izb = $config['max_lines_count'] - $total;
	// переизбытык понизить до макс линии
	if ($total > 0) {
		$pereiz = $config['max_lines_count'] / $total;
	}
	

	if ($total > $config['max_lines_count']){
		foreach ($companies as $key => $value) {
			$companies[$key]['speed'] = intval(floor($companies[$key]['speed'] * $pereiz));
		}
	}
}

function getCompanies($config)
{
	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);	
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}

	$sql = 'SELECT c.*, u.name AS user_name FROM xm9wl_calls_companies c
		JOIN xm9wl_users u ON c.user_id = u.id
		WHERE status = "new" and start_datetime < now() 
	        order by user_id, start_datetime';

	mysqli_set_charset($link, "utf8");
	
	$result = mysqli_query($link, $sql);
	$result = mysqli_fetch_all($result, MYSQLI_ASSOC);

	$link->close();

	return $result;
}

function makeCall($config, $call, $iter, $wavCounter)
{

    $timestamp = date("H:i:s");

    $call['vars'] = prepareToSync($wavCounter, $call['vars']);
	
	updateStatus($config, $call);

    $my_file = $config['temp_path'] . "/" . $config['name_key'] . $config['name_sep'] . $iter . $config['name_sep'] . $timestamp . $config['name_sep'] . $call['phone_number'] . '.call';

    $handle = fopen($my_file, 'a');

    switch ($call['type']) {
    	case 'start_script':
    		$extension_prefix = '9';
    		break;
    	case 'hard_script':
    		$extension_prefix = '6';
    		break;
    	case 'hard_script_delta':
    		$extension_prefix = '61';
    		break;
    	case 'soft_script':
    		$extension_prefix = '7';
    		break;
    	case 'tengeda_soft_script':
    		$extension_prefix = '3';
    		break;
    	case 'mykhat_hr_script':
    		$extension_prefix = '2';
    		break;
    	case 'hr_script':
    		$extension_prefix = '5';
    		break;
    	case 'hr_script_02':
    		$extension_prefix = '4';
    		break;
    	case 'start_script_freedom':
    		$extension_prefix = '11';
    		break;
    	case 'soft_script_freedom':
    		$extension_prefix = '12';
    		break;
    	case 'hard_script_freedom':
    		$extension_prefix = '13';
    		break;
    	case 'pre_script_freedom':
    		$extension_prefix = '14';
    		break;
    	case 'tengeda_first_script':
    		$extension_prefix = '15';
    		break;
    	case 'soft_script_syn':
    		$extension_prefix = '16';
    		break;
    	case 'testing_script':
    		$extension_prefix = '17';
    		break;
        case 'pre_script_kaspi':
                $extension_prefix = '18';
                break;
        case 'start_script_kaspi':
                $extension_prefix = '19';
                break;
        case 'soft_script_kaspi':
                $extension_prefix = '20';
                break;
        case 'hard_script_kaspi':
                $extension_prefix = '21';
                break;
        case '3party_script_kaspi':
                $extension_prefix = '22';
                break;
        case 'pre_script_mm_1':
                $extension_prefix = '23';
                break;
        case 'pre_script_mm_2':
                $extension_prefix = '24';
                break;
        case 'pre_script_mm_3':
                $extension_prefix = '25';
                break;
        case 'pre_script_solva_1':
                $extension_prefix = '26';
                break;
        case 'pre_script_solva_2':
                $extension_prefix = '27';
                break;
        case 'pre_script_solva_3':
                $extension_prefix = '28';
                break;
        case 'soft_script_freedom_2':
                $extension_prefix = '29';
                break;
        case 'pre_script_kmf':
                $extension_prefix = '30';
                break;
        case 'soft_script_freedom_3':
                $extension_prefix = '31';
                break;
        case 'ins_script_halyk_1':
                $extension_prefix = '32';
                break;
        case 'ins_script_halyk_2':
                $extension_prefix = '33';
                break;
        case 'pre_script_kmf_1':
                $extension_prefix = '34';
                break;
        case 'pre_script_kmf_2':
                $extension_prefix = '35';
                break;
        case 'pre_script_kmf_3':
                $extension_prefix = '36';
                break;
        case 'start_script_kmf':
                $extension_prefix = '37';
                break;
        case 'soft_script_kmf_1':
                $extension_prefix = '38';
                break;
        case 'soft_script_kmf_2':
                $extension_prefix = '39';
                break;
        case 'hard_script_freedom_2':
                $extension_prefix = '40';
                break;
        case 'hard_script_freedom_3':
                $extension_prefix = '41';
                break;            
        case 'pre_script_beeline_1':
                $extension_prefix = '42';
                break;
        case 'pre_script_beeline_2':
                $extension_prefix = '43';
                break;
        case 'pre_script_beeline_3':
                $extension_prefix = '44';
                break;
        case 'start_script_beeline':
                $extension_prefix = '45';
                break;
        case 'soft_script_beeline_1':
                $extension_prefix = '46';
                break;
        case 'soft_script_beeline_2':
                $extension_prefix = '47';
                break;
        case 'start_script_turbo':
                $extension_prefix = '48';
                break;
        case 'soft_script_turbo_1':
                $extension_prefix = '49';
                break;
        case 'soft_script_turbo_2':
                $extension_prefix = '50';
                break;
        case 'soft_script_jusan_1':
                $extension_prefix = '51';
                break;
        case 'start_script_bcc':
                $extension_prefix = '52';
                break;
        case 'soft_script_bcc_1':
                $extension_prefix = '53';
                break;
        case 'soft_script_bcc_2':
                $extension_prefix = '54';
                break;
        case 'soft_script_bcc_3':
                $extension_prefix = '55';
                break;
        case 'overdraft_script_freedom':
                $extension_prefix = '56';
                break;
        case 'start_script_mm':
                $extension_prefix = '57';
                break; 
        case 'soft_script_mm_1':
                $extension_prefix = '58';
                break;
        case 'soft_script_mm_2':
                $extension_prefix = '59';
                break;
        case 'soft_script_mm_3':
                $extension_prefix = '60'; /* 61 уже занят, смотри вверх*/
                break;   
        case 'tengeda_start_script':
                $extension_prefix = '62';
                break;
        case 'tengeda_hard_script':
                $extension_prefix = '63';
                break;
        case 'fees_script_freedom':
                $extension_prefix = '64';
                break;
        case 'pre_script_kaspi_2':
                $extension_prefix = '65';
                break;
        case 'tengeda_hard_script_2':
                $extension_prefix = '66';
                break;
    	case 'yandex_script_01':
    		$extension_prefix = '101';
    		break;
    	case 'yandex_script_02':
    		$extension_prefix = '102';
    		break;
    	default:
    		$extension_prefix = '7';
    		break;
    }

    if (gethostname() == "d40892.acod.regrucolo.ru") {

    	$data_beeline = 'Channel: SIP/' . $call['phone_number'] . "@beeline\n" .
		        'Callerid: 4999290367' . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: mycontext'."\n".
		        'Extension: ' . $extension_prefix . '4999290367'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';
		$data = $data_beeline;

    } elseif (gethostname() == "kaspi.cybernet.pbx") {
    	/*
    	$data_tele2 = 'Channel: SIP/' . $call['phone_number'] . "@tele2\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: tele2'."\n".
		        'Extension: ' . $extension_prefix . '7088556437'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';
	$data = $data_tele2;
	*/
	
	$p_number = strval($call['phone_number']);
	$p_number[0] = '8';
	$data_kaspi = 'Channel: SIP/' . $p_number . "@kaspi_cybernet_soft\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: kaspi_cybernet_soft'."\n".
		        'Extension: ' . $extension_prefix . '1101'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';
	$data = $data_kaspi;
	

    } else {

    	$data_beeline = 'Channel: SIP/' . $call['phone_number'] . "@beeline\n" .
		        'Callerid: 77719384147' . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: beeline'."\n".
		        'Extension: ' . $extension_prefix . '7719365237'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';

		$data_tele2 = 'Channel: SIP/' . $call['phone_number'] . "@tele2\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: tele2'."\n".
		        'Extension: ' . $extension_prefix . '7076025957'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';

		$data_tele2_delta = 'Channel: SIP/' . $call['phone_number'] . "@tele2_delta\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: tele2_delta'."\n".
		        'Extension: ' . $extension_prefix . '7084802601'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';

		$data_turbomaney = 'Channel: SIP/' . substr($call['phone_number'],1) . "@turbomoney\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: turbomoney'."\n".
		        'Extension: ' . $extension_prefix . '1002003040'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';

		$data_tascredit = 'Channel: SIP/' . $call['phone_number'] . "@tascredit\n" .
		        'Callerid: ' . $call['phone_number'] . "\n".
		        'MaxRetries: 0'."\n".
		        'RetryTime: 300'."\n".
		        'WaitTime: 45'."\n".
		        'Context: tele2'."\n".
		        'Extension: ' . $extension_prefix . '7076025957'."\n".
		        'Priority: 1'."\n".
		        'Archive: yes';

		//Каналы для разных клиентов
		 if ($call['userid'] == '320') { //Дельта М
		 	$data = $data_tele2_delta;
		 } elseif ($call['userid'] == '335') { //Beeline
		 	$data = $data_beeline;
                        /*$data = $data_beeline;*/
		 } elseif ($call['userid'] == '336') { //Turbomoney
		 	$data = $data_turbomaney;
		 } elseif ($call['user_name'] == 'tascredit') { 
		 	//$data = $data_tele2;
		 	$data = $data_tascredit;
		 } else {
		 	$data = $data_tele2;
		 }

		//$data = $data_beeline;
    }

    

    //fwrite($handle, $data_beeline); // - current telephony provider
    fwrite($handle, $data);
    fclose($handle);
    // повтор номера на дозвон не исключено что будет конфликт
	$command = 'mv -f "' . $my_file . '" "' . $config['path_call_files'] . '"';
	shell_exec($command);

	createDetailsCall($config, $call, $call['phone_number']);
}

function createDetailsCall($config, $call, $phone_number)
{
	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);	
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}


	mysqli_set_charset($link, "utf8");

	$sql = 'INSERT INTO xm9wl_calls_details
			VALUES
				(NULL, ' . $call['id'] . ', "' . $phone_number . '", now(), now(), now(), "in_progress","","","",0,"","", "' 
				. $call['type'] . '", "' 
				. $call['language'] . '", "' 
				. $call['gender_voice'] . '", "' 
				. mysqli_real_escape_string($link, $call['ccname']) . '", "' 
				. $call['company_id'] . '", "' 
				. $call['userid'] . '", "default")';
	
	mysqli_query($link, $sql);

	$link->close();
}

function updatePullStatus($link, $config, $call)
{
	
	$sql = 'UPDATE xm9wl_calls_batches 
			SET status = "in_pull"
			WHERE id = ' . $call['id'];
	mysqli_query($link, $sql);	

}

function updateStepStatus($link, $config, $company_id)
{
	
	$sql = 'UPDATE xm9wl_calls_companies
			SET step = "in_progress"
			WHERE id = ' . $company_id;
	mysqli_query($link, $sql);	

}

//   update table batches 
//   status in_progress, try = try -1, json?
function updateStatus($config, $call)
{
	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);	
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}
	
	mysqli_set_charset($link, "utf8");

	$sql = "UPDATE xm9wl_calls_batches 
			SET status = 'in_progress',
				try  = try - 1,
				vars = '" . mysqli_real_escape_string($link, $call['vars']) . "'  
			WHERE id = " . $call['id'];
	mysqli_query($link, $sql);	

	$link->close(); 
}

function completeCampaign($config) 
{

	$link = 0;
	$flag = true;
	while ($flag) {
		$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);	
		if (mysqli_connect_errno()) {
			$flag = true;
			sleep(10);
		} else {
			$flag = false;
		}
	}
	

	$sql = 'SELECT 
				c.id,
				(COUNT(DISTINCT b.id) - COUNT(DISTINCT IF(b.status = "canceled", b.id, NULL))) AS count,
				SUM(IF(d.duration IS NULL, 0, d.duration)) AS duration,
			    
                COUNT(DISTINCT IF(d.status = "completed", b.id, NULL)) AS served, 

			    SUM(IF(d.promise = "yes", 1, 0)) AS promise_to_pay,
			    ROUND((SUM(IF(d.duration IS NULL, 0, d.duration) * b.price) / 60), 2) AS price,
				(SUM(b.status = "new") + SUM(b.status = "in_progress") 
                    + SUM(b.status = "recall") + SUM(b.status = "in_pull") 
                    + SUM(b.status = "sync") + SUM(b.status = "in_sync")
                    + SUM(b.status = "wait_sync") + SUM(b.status = "for_trans"))   as st
			FROM xm9wl_calls_batches b
			LEFT JOIN xm9wl_calls_details d ON b.id = d.calls_batches_id
			LEFT JOIN xm9wl_calls_companies c ON b.company_id = c.id
			WHERE 
				c.status = "new"
			GROUP BY c.id';
	$result = mysqli_query($link, $sql);

	$result = mysqli_fetch_all($result, MYSQLI_ASSOC);

	for ($i = 0; $i < count($result); $i++) {
		$sql3 = 'SELECT 
					ROUND(SUM(b.status = "completed") / COUNT(*) * 100) AS progress
				FROM xm9wl_calls_batches b
				WHERE 
					b.company_id = ' . $result[$i]['id'] . ' ';
		$result2 = mysqli_query($link, $sql3);
		$result2 = mysqli_fetch_all($result2, MYSQLI_ASSOC);

		$status = ( $result[$i]['st'] == 0) ? 'completed' : 'new';
		$step   = ($status == 'completed') ? 'completed' : 'in_progress';
		$sql_2 = "UPDATE xm9wl_calls_companies 
				  SET status = '" . $status . "', 
				      step = if(step = 'canceled', 'canceled', '" . $step . "'), 
				  	  progress = '" . $result2[0]['progress'] . "', 
				  	  count = '" . $result[$i]['count'] . "',
				  	  duration = '" . $result[$i]['duration'] . "', 
				  	  price = '" . $result[$i]['price'] . "',
				  	  answers = '" . $result[$i]['served'] . "',
				  	  positives = '" . $result[$i]['promise_to_pay'] . "'
				  WHERE id = " . $result[$i]['id'];
		mysqli_query($link, $sql_2);
	}

	$link->close();
}

function isWorkTime()
{
    
	$H = date('H');
	$H_min = 8;
	$H_max = 22;
	$minute = 60;    	

    if ($H < $H_min or 
			$H >= $H_max){
    	return false;
	}
	return true;
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function prepareToSync($call_number, $json){
	
	$Paths = include('config_paths.php');

	$sync_collums = array_keys($Paths);
	$call_data    = json_decode($json, true);
	if (!is_array($call_data)){
		return $json;
	}


	$prefix_arr = array('male_ru_', 'female_ru_', 'male_kz_', 'female_kz_');

	foreach ($call_data as $key => $value) {
		if (in_array($key, $sync_collums)) {

			$flag_exists = true;
			for ($i=0; $i < 4; $i++) { 
				$pregix = '';
				if (is_numeric($value)){
					$tmp = intval($value);
					$pregix = strval(intdiv($tmp, 100000)) . '/' . $prefix_arr[$i];
				}

				$first_file = $Paths[$key]['home'][$i] . $pregix . mb_strtolower($value) . ".wav";
				$dest_file  = $Paths[$key]['dest'][$i] . $call_number . ".wav";

				if (file_exists($first_file)) {
					// копирование и замена
					$command = 'cp -f "' . $first_file . '" "' . $dest_file . '"';
					shell_exec($command);
				} else {
					$flag_exists = false;
				}
			}

			if ($flag_exists){
				//  новый реалайзер со значением call_number 
				$call_data[$key . 'S'] = strval($call_number);
			} else {
				$call_data[$key . 'S'] = "none";
			}		

		}
	}

	return json_encode($call_data, JSON_UNESCAPED_UNICODE);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
?>

### end of file
### config.php
<?php

$params = array(
        'debug' => 0,
        'config_from_BD' => true,

        'listScripts' => array('avtocredit_script_freedom', 'pre_script_prodmm_1', 'pre_script_prodmm_2', 'pre_script_prodmm_3', 'soft_script_bank_2', 'soft_script_bank_3','soft_script_bank_4'),

        'host'     => '94.247.133.10',
        'username' => 'cybernet',
        'password' => 'fsgyb243!Ss3gav3',
        'database' => 'cybernet_calls',
        'name_key' => 'callfile',
        'name_sep' => '_',
        
        'synteth_looper' => 1000,

        'user_sms' => 'cybernet1http',
        'pass_sms' => 'kETJh3bem',
        'url_sms'  => 'http://kazinfoteh.org:809/api',

        'path_call_files' => '/omilia/apps/OmIVR/var/spool/asterisk/outgoing/', 
        'temp_path' => '/var/www/evotech/callmanager_deamons/tmp', 
        
        'max_array_size' => 1000,
        'max_lines_count' => 150, // Количество линий
        'system_files_count' => 0, //Для MacOS = 1 и для остальных 0

        'pool_size' => 150, // Размер пула
        //'line_size' => 30, // Количество линий
        'min_lines' => 5, // Минимальное количество каналов, выделяемое компании
        'price' => 0.14, // Стоимость минуты 
        'deamon_sleep_time' => 60,
        'simulator_sleep_time' => 60,
        'call_close_minute_wait' => 1,
        'call_close_sleep_time' => 90,
        'recall_sleep_time' => 60,
        
        'call_status' => array(
            0 => 'no_answer', 
            1 => 'completed'
        ),

        'call_lang' => array(
            0 => 'ru', 
            1 => 'kz'
        ),

        'call_answer' => array(
            0 => 'promise_to_pay', 
            1 => 'financial_difficulties',
            2 => 'third_party',
            3 => 'deferment_of_payment',
            4 => 'refusal',
        ),

        'call_text' => array(
            0 => 'да да да я оплачу', 
            1 => 'здравствуйте у меня проблемы просто нет денег не могу платить',
            2 => 'добрый день вы не туда попали у меня нет долга',
            3 => 'здравствуйте я сейчас не могу платить вы можете дать отсрочку нужно время',
            4 => 'здравствуйте не нужно звонить больше платить не буду',
        )
    );


if (gethostname() == "d40892.acod.regrucolo.ru") {
    
    $params['host'] = '31.31.198.206';
    $params['username'] = 'u1257477_cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'u1257477_calls';

    $params['temp_path'] = '/var/www/deamons/tmp';
    $params['max_lines_count'] = 5;
    $params['pool_size'] = 5;

} elseif (gethostname() == "kaspi.cybernet.pbx") {
    

    $params['listScripts'] = array();
    
    $params['host'] = '185.5.206.138';
    $params['username'] = 'kaspi_pbx';
    $params['password'] = 'Rjcvjc13';
    $params['database'] = 'cybernet_calls';
    $params['synteth_looper'] = 3000;
  
    $params['temp_path'] = '/omilia/apps/OmIVR/var/spool/asterisk/tmp';
    $params['max_lines_count'] = 100;
    $params['pool_size'] = 100;

} elseif (gethostname() == "dan-Lenovo-G50-80") {
    
    $params['debug'] = 1;
    $params['host'] = '127.0.0.1';
    $params['username'] = 'root';
    $params['password'] = '';
    $params['database'] = 'calls';

    $params['path_call_files'] = '/home/dan/Рабочий стол/projects/calls_deamon/calls';
    $params['temp_path'] = '/home/dan/Рабочий стол/projects/calls_deamon/tmp';

} elseif (gethostname() == "lpdan") {
    
    $params['debug']          = 1;
    $params['config_from_BD'] = true;
    
    $params['host']           = '127.0.0.1';

    $params['username'] = 'root';
    $params['password'] = '';
    $params['database'] = 'backup';

    $params['path_call_files'] = '/home/dan/Desktop/projects/work/callmanager_deamons/calls';
    $params['temp_path'] = '/home/dan/Desktop/projects/work/callmanager_deamons/tmp';

} elseif (gethostname() == "MacBook-Pro-Rashid.local") {

    $params['debug'] = 1;
    $params['host'] = '127.0.0.1';
    $params['username'] = 'root';
    $params['password'] = '';
    $params['database'] = 'calls2';

    $params['path_call_files'] = '/Applications/XAMPP/htdocs/callmanager_deamons/calls';
    $params['temp_path'] = '/Applications/XAMPP/htdocs/callmanager_deamons/tmp';

} elseif (gethostname() == "DESKTOP-0FTMEE5") {
	
	$params['debug'] = 1;
    $params['host'] = '127.0.0.1';
    $params['username'] = 'root';
    $params['password'] = '';
    $params['database'] = 'callssss';

    $params['path_call_files'] = 'C:\Users\Exile\Desktop\Projects\calld\calls';
    $params['temp_path'] = 'C:\Users\Exile\Desktop\Projects\calld\tmp';
} elseif (gethostname() == "AsteriskTest") {
    
    $params['host'] = '185.5.206.124';
    $params['username'] = 'cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-dev-backend-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend02-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend05-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend06-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend04-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend10-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';
 
} elseif (gethostname() == "kz-prod-backend11-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend09-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend07-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend13-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend08-cyber") {
    
    $params['host'] = '94.247.133.10';
    $params['username'] = 'cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend12-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend14-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend15-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend16-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend17-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend18-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend19-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend20-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend21-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend22-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend23-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend28-cyber") {
    
    $params['host'] = '94.247.133.10';
    $params['username'] = 'cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend29-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend30-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend31-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend37-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend38-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend39-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend40-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend41-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend42-cyber") {
    
    $params['host'] = '94.247.133.10';
    $params['username'] = 'cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend43-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend44-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-prod-backend45-cyber") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "cyber-nfs-test-server") {
    
    $params['host'] = 'web.cybernet.kz';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kz-backend-NLS-physic") {
    
    $params['host'] = '94.247.133.10';
    $params['username'] = 'cybernet';
    $params['password'] = 'fsgyb243!Ss3gav3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber02") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber03") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber04") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber05") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber06") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber07") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber08") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber09") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber10") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber11") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "uz-prod-backend-cyber12") {
    
    $params['host'] = '176.96.241.68';
    $params['username'] = 'cybernet_all';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "kg-prod-backend01-cyber") {
    
    $params['host'] = '195.38.164.118';
    $params['username'] = 'cybernet_kg';
    $params['password'] = 'ZsE$1wDc@WA!3';
    $params['database'] = 'cybernet_calls';

} elseif (gethostname() == "worker-builder") {
    
    $params['host'] =  '10.1.0.51';
    $params['username'] = 'cybernet-all';
    $params['password'] = 'Master0108';
    $params['database'] = 'cybernet_calls';

}

return $params;

?>

### end of file
### config_paths.php
<?php
    $Paths = array();
    $reallizers_list = array();

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/amounts/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/SyntAmounts/'
             ,'field_name'       => 'rl_inputAmount'
             ,'field_name_file'  => 'inputAmount');

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/names/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/SyntNames/'
             ,'field_name'       => 'rl_clientName'
             ,'field_name_file'  => 'clientName');

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/names/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Synt3PartyNames/'
             ,'field_name'       => 'rl_thirdPersonName'
             ,'field_name_file'  => 'thirdPersonName');

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/amounts/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Insurance_Amount_Full/'
             ,'field_name'       => 'rl_insuranceAmountFull'
             ,'field_name_file'  => 'insuranceAmountFull');

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/amounts/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Insurance_Amount_Discount/'
             ,'field_name'       => 'rl_insuranceAmountDiscount'
             ,'field_name_file'  => 'insuranceAmountDiscount');

    $reallizers_list[] =
        array('home_parent_path' => '/home/cybernet-adm/Synt/amounts/'
             ,'dest_parent_path' => '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Insurance_Amount_Half/'
             ,'field_name'       => 'rl_insuranceAmountHalf'
             ,'field_name_file'  => 'insuranceAmountHalf');

   
    $settings_wav = array('wav_lang_from' => array('ru/male/', 'ru/female/', 'kz/male/', 'kz/female/')
                         ,'wav_name_dest' => array('_ru_male_', '_ru_female_', '_kz_male_', '_kz_female_'));



    $list_of_uz_servers = array('uz-prod-backend-cyber'
                            , 'uz-prod-backend-cyber02'
                            , 'uz-prod-backend-cyber03'
                            , 'uz-prod-backend-cyber04'
                            , 'uz-prod-backend-cyber05'
                            , 'uz-prod-backend-cyber06'
                            , 'uz-prod-backend-cyber07'
                            , 'uz-prod-backend-cyber08'
                            , 'uz-prod-backend-cyber09'
                            , 'uz-prod-backend-cyber10'
                            , 'uz-prod-backend-cyber11'
                            , 'uz-prod-backend-cyber12');

    $list_of_kg_servers = array('kg-prod-backend01-cyber'
                            , 'kg-prod-backend02-cyber'
                            , 'kg-prod-backend03-cyber'
                            , 'kg-prod-backend04-cyber');

    if (in_array(gethostname(), $list_of_uz_servers)){
         $settings_wav = array('wav_lang_from' => array('ru/male/', 'ru/female/', 'uz/male/', 'uz/female/')
                         ,'wav_name_dest' => array('_ru_male_', '_ru_female_', '_uz_male_', '_uz_female_'));
    }

    elseif (in_array(gethostname(), $list_of_kg_servers)){
         $settings_wav = array('wav_lang_from' => array('ru/male/', 'ru/female/', 'kg/male/', 'kg/female/')
                         ,'wav_name_dest' => array('_ru_male_', '_ru_female_', '_kg_male_', '_kg_female_'));
    }
        

        if (gethostname() == "d40892.acod.regrucolo.ru") {
            $arr = 1;
           
        } elseif (gethostname() == "dan-Lenovo-G50-80") {
            $arr = 1;
            
        } elseif (gethostname() == "lpdan") {
            $reallizers_list[0]['field_name'] = 'qwerty';

            $reallizers_list[0]['home_parent_path'] = '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Synt/amounts/';
            $reallizers_list[1]['home_parent_path'] = '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Synt/names/';
            $reallizers_list[2]['home_parent_path'] = '/omilia/apps/OmIVR/var/lib/asterisk/sounds/Synt/names/';
           
        } elseif (gethostname() == "MacBook-Pro-Rashid.local") {
            $arr = 1;    
          
        } elseif (gethostname() == "DESKTOP-0FTMEE5") {
            $arr = 1;	
        	
        } elseif (gethostname() == "AsteriskTest") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-dev-backend-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend02-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend05-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend04-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend06-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend10-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend11-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend09-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend13-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend07-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend08-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend12-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend14-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend15-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend16-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend17-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend18-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend19-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend20-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend21-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend22-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend23-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend28-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend29-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend30-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend31-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend37-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend38-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend39-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend40-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend41-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend42-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend43-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend44-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kz-prod-backend45-cyber") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "cyber-nfs-test-server") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/mnt/audio_storage/names/';

            $reallizers_list[2]['home_parent_path'] = '/mnt/audio_storage/names/';

        } elseif (gethostname() == "kz-backend-NLS-physic") {

            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber") {
    
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber02") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber03") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber04") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber05") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber06") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber07") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber08") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber09") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber10") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber11") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "uz-prod-backend-cyber12") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "kg-prod-backend01-cyber") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

            $reallizers_list[2]['home_parent_path'] = '/var/lib/asterisk/sounds/names/';

        } elseif (gethostname() == "worker-builder") {
            
            $reallizers_list[0]['field_name'] = 'qwerty';
            
            $reallizers_list[1]['home_parent_path'] = '/opt/sounds_test/names/';

            $reallizers_list[2]['home_parent_path'] = '/opt/sounds_test/names/';

        }

    foreach ($reallizers_list as $key => $fieldSetting) {
        for ($i=0; $i < 4; $i++) { 
            $Paths[$fieldSetting['field_name']]['home'][$i] = $fieldSetting['home_parent_path'] 
                                                                        . $settings_wav['wav_lang_from'][$i];

            $Paths[$fieldSetting['field_name']]['dest'][$i] = $fieldSetting['dest_parent_path'] 
                                                                        . $fieldSetting['field_name_file'] 
                                                                        . $settings_wav['wav_name_dest'][$i];
        }
    }




return $Paths;

?>

### end of file
### update details.sql
UPDATE `xm9wl_calls_details` d , `xm9wl_calls_batches` b, `xm9wl_calls_companies` c 
SET 
d.`btype`			= b.type,
d.`blanguage` 		= b.language,
d.`bgender_voice` 	= b.gender_voice,
d.`ccname`			= c.name,
d.`ccid`			= c.id,
d.`ccuser_id`		= c.user_id 
WHERE d.calls_batches_id = b.id
  and b.company_id  	 = c.id


  CREATE TABLE `backup`.`xm9wl_calls_deamon_config` 
  ( `id` INT NOT NULL AUTO_INCREMENT , 
    `pool_size` INT NOT NULL , `max_array_size` INT NOT NULL , 
    `call_close_sleep_time` INT NOT NULL , `call_close_minute_wait` INT NOT NULL , 
    `recall_sleep_time` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM CHARSET=utf8 COLLATE utf8_general_ci; 
### end of file
### call_simulator.php
<?php
$config = include('config.php');

while (1) {
	//Сканируем директорию
	$files = scandir($config['path_call_files']);

	foreach ($files as $key => $value) {

		//Забираем толькно нужные нам файлы
	  	if(stristr($value, $config['name_key']) == true) {

	  		//Получаем номер телефона из названия файла
	  		$sep = explode($config['name_sep'], $value);
	  		$sep = explode(".", $sep[3]);
			$phone_number = $sep[0];

			//Получаем Batch ID по названию номеру телефонв
			$batch = getBatch($config, $phone_number);
			$batch_id = $batch[0]['id'];

			
			$call_status = rand(0, 1);			//Генерация статуса
			$start_datetime = new DateTime();	//Генерация времени звонка

			if ($call_status) { // Звонок совершен

				$call_answer = rand(0, 4); 															//Генерация ответа
				if ($call_answer <3) $promise = "yes"; else $promise = ""; 
				$voice_datetime_rand = rand(2, 30);													//Генерация времени начала диалога
				$voice_datetime = new DateTime('+' . $voice_datetime_rand . ' seconds');			
				$duration = rand(5, 80);															//Генерация длительности разговора
				$end_datetime = new DateTime('+' . ($voice_datetime_rand + $duration). ' seconds'); //Генерация вемени завершения диалога
				$f_language = rand(0, 1);															//Генерация языка общения

				/*
				echo "phone_number = " . $phone_number . "
				";
				echo "batch_id = " . $batch_id . "
				";
				echo "call_status = " . $config['call_status'][$call_status] . "
				";
				echo "start_datetime = " . $start_datetime->format('Y-m-d H:i:s') . "
				";
				echo "call_answer = " . $config['call_answer'][$call_answer] . "
				";
				echo "voice_datetime = " . $voice_datetime->format('Y-m-d H:i:s') . "
				";
				echo "duration = " . $duration . "
				";
				echo "end_datetime = " . $end_datetime->format('Y-m-d H:i:s') . "
				";
				echo "f_language = " . $config['call_lang'][$f_language] . "
				";
				echo "promise = " . $promise . "
				";
				echo "text_details = " . $config['call_text'][$call_answer] . "
				";
				echo "
				";
				*/

				//insertDetails($config, $batch_id, $phone_number, $start_datetime->format('Y-m-d H:i:s'), $voice_datetime->format('Y-m-d H:i:s'), $end_datetime->format('Y-m-d H:i:s'), $config['call_status'][$call_status], $config['call_answer'][$call_answer], $config['call_text'][$call_answer], $config['call_lang'][$f_language], $duration, $promise);
				updateDetails($config, $batch_id, $phone_number, $start_datetime->format('Y-m-d H:i:s'), $voice_datetime->format('Y-m-d H:i:s'), $end_datetime->format('Y-m-d H:i:s'), $config['call_status'][$call_status], $config['call_answer'][$call_answer], $config['call_text'][$call_answer], $config['call_lang'][$f_language], $duration, $promise);

			} else { //Трубку не подняли
				/*
				echo "phone_number = " . $phone_number . "
				";
				echo "batch_id = " . $batch_id . "
				";
				echo "call_status = " . $config['call_status'][$call_status] . "
				";
				echo "start_datetime = " . $start_datetime->format('Y-m-d H:i:s') . "
				";
				echo "call_answer = 
				";
				echo "voice_datetime = 
				";
				echo "duration = 
				";
				echo "end_datetime = 
				";
				echo "f_language = 
				";
				echo "promise = 
				";
				echo "text_details = 
				";
				echo "
				";
				*/

				//insertDetails($config, $batch_id, $phone_number, $start_datetime->format('Y-m-d H:i:s'), '', '', $config['call_status'][$call_status], '', '', '', 0);
				updateDetails($config, $batch_id, $phone_number, $start_datetime->format('Y-m-d H:i:s'), '', '', $config['call_status'][$call_status], '', '', '', 0, '');
			}

			//Удаляем файл обзвона
			unlink($config['path_call_files'] . '/' . $value);

			sleep((int) 60 / $config['min_lines']);
	    }
	}
	sleep($config['simulator_sleep_time']);
}


//------------------------------------------------------------------------------------------------------------------

function getBatch($config, $phone_number)
{
	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);

	$sql = 'SELECT * FROM xm9wl_calls_batches WHERE status = "in_progress" AND phone_number LIKE ' . $phone_number . ' ORDER BY id LIMIT 1';
	$result = mysqli_query($link, $sql);

	return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

function insertDetails($config, $calls_batches_id, $phone_number, $start_datetime, $voice_datetime, $end_datetime, $status, $answer, $text_details, $f_language, $duration, $promise)
{
	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);
	
	mysqli_set_charset( $link, 'utf8' );

	$sql = 'INSERT INTO xm9wl_calls_details VALUES(NULL, ' . $calls_batches_id . ', "' . $phone_number . '", "' . $start_datetime . '", "' . $voice_datetime . '", "' . $end_datetime . '", "' . $status . '", "' . $answer . '", "' . $text_details . '", "'  . $f_language . '", "' . $duration . '", "' . $promise . '", "69a4be6509906e67783aea0d32bd0a64")';
	
	mysqli_query($link, $sql);

	$sql = 'UPDATE xm9wl_calls_batches SET status = "completed" WHERE id = ' . $calls_batches_id;
	
	mysqli_query($link, $sql);

}

function updateDetails($config, $calls_batches_id, $phone_number, $start_datetime, $voice_datetime, $end_datetime, $status, $answer, $text_details, $f_language, $duration, $promise)
{
	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);
	
	mysqli_set_charset( $link, 'utf8' );

	$sql = 'UPDATE xm9wl_calls_details SET 
	start_datetime = "' . $start_datetime . '",
	voice_datetime = "' . $voice_datetime . '",
	end_datetime = "' . $end_datetime . '",
	status = "' . $status . '",
	answer = "' . $answer . '",
	text_details = "' . $text_details . '",
	f_language = "' . $f_language . '",
	duration = "' . $duration . '",
	promise = "' . $promise . '"
	WHERE status = "in_progress" AND calls_batches_id = ' . $calls_batches_id;
	
	mysqli_query($link, $sql);

	$sql = 'UPDATE xm9wl_calls_batches SET status = "completed" WHERE id = ' . $calls_batches_id;
	
	mysqli_query($link, $sql);

}

?>
### end of file
### run_file_close_calls.php
<?php
$config = include('config.php');
include('handlers/nocall_details.php');
 
while (1 == 1) {

	$link = mysqli_connect($config['host'], $config['username'], $config['password'], $config['database']);

	if (mysqli_connect_errno()) {
	    $fd = fopen("closecall.log", 'a');
		$str = "Connect failed: " . mysqli_connect_error() . "\n";
		fwrite($fd, date("Y-m-d H:i:s") . '|' . $str);
		fclose($fd);
		//$link->close();
		sleep($config['recall_sleep_time']);
		continue;
	} elseif ($config['debug'] == 1) {
		print_r("Normal connection to database \n");
	}
 

//  Выбираем все сброшенные звонки [критерии висит более 5 минут из детализации звонка]
	$sql = "SELECT dd.*, bb.user_col1, bb.vars, cc.try as def_try, bb.try
            FROM xm9wl_calls_details as dd
            JOIN xm9wl_calls_batches as bb on dd.calls_batches_id = bb.id
            JOIN xm9wl_calls_companies as cc on cc.id = bb.company_id
            WHERE TIMESTAMPDIFF(minute, dd.start_datetime, now()) >  " . $config['call_close_minute_wait'] . "
              and dd.start_datetime > CURRENT_DATE() 
              and dd.`status` = 'in_progress' 
              and dd.`diamant_dialog_id` = ''";

	try {
		$result = mysqli_query($link, $sql);
		$data = mysqli_fetch_all($result, MYSQLI_ASSOC);

		if (count($data)==0){
			$link->close();
			sleep($config['call_close_sleep_time']);		
			continue;
		}


		foreach ($data as $key => $value) {
		//  Отправляем на перевон или если достигли предела перезвонов закрываем звонок
			$sql = "UPDATE xm9wl_calls_batches 
					   SET `status` = if(try <= 0, 'completed', 'recall') 
					 WHERE id = " . $value['calls_batches_id'];
			mysqli_query($link, $sql);

		//  Обновляем статус сброшенных звонков [критерии висит более 5 минут из детализации звонка]	
			$sql = "UPDATE xm9wl_calls_details 
					   SET `status` = 'no_answer'
					 WHERE id = " . $value['id'];
			mysqli_query($link, $sql);

            if ((gethostname() == "kaspi.cybernet.pbx") or (gethostname() == "lpdan")){
                $result = send_request($value);

                $sql = "INSERT INTO `xm9wl_temp_errors` (`id`, `text`, `time`, `type`) 
                            VALUES (NULL, '" . $result . "', current_timestamp(), 'no_answer')"; 
                mysqli_query($link, $sql);     
            }
		}		  
		
		if ($config['debug'] == 1) {
			print_r("SQL requests successfully, rows count" . count($data) . "\n");
		}
		
		$link->close();
		
	} catch (Exception $e) {
		if ($config['debug'] == 1) {
			print_r("SQL requests ERROR \n");	
		}

 		$fd = fopen("recall.log", 'a');
		$str = "SQL requests ERROR : \n";
		fwrite($fd, date("Y-m-d H:i:s") . '|' . $str);
		fclose($fd);
	}
	

	
	sleep($config['call_close_sleep_time']);
}
### end of file
### closecall.log
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
Connect failed: Connection timed out
2020-10-13 22:45:26|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:49:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:52:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 22:56:26|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:00:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:03:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:07:26|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:11:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:14:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:18:26|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:22:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:25:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:29:26|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:33:06|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:36:46|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:40:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:44:07|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:47:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:51:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:55:07|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-13 23:58:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:02:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:06:07|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:20:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:24:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:28:07|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:31:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:35:27|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:39:07|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 00:42:47|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:16:43|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:20:23|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:24:03|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:27:43|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:31:23|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 01:35:03|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2020-10-14 21:05:41|Connect failed: Connection timed out
2020-10-15 11:19:28|Connect failed: Too many connections
2020-11-23 10:50:17|Connect failed: Too many connections
2020-12-13 21:41:36|Connect failed: MySQL server has gone away
2021-03-10 05:42:26|Connect failed: Connection timed out
2021-03-10 05:47:32|Connect failed: Connection timed out
2021-03-10 06:01:50|Connect failed: Connection timed out
2021-03-10 06:05:30|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:08:51|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:12:13|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:15:39|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:19:04|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:22:37|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 06:26:11|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:11:16|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:18:42|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:26:47|Connect failed: Connection timed out
2021-03-10 09:30:11|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-10 09:33:32|Connect failed: php_network_getaddresses: getaddrinfo failed: Name or service not known
2021-03-16 15:36:25|Connect failed: Too many connections
2021-03-31 15:06:23|Connect failed: Too many connections
2021-04-05 19:23:28|Connect failed: Connection timed out
2021-04-05 19:31:29|Connect failed: Connection timed out
2021-04-05 19:35:29|Connect failed: Connection timed out
2021-04-05 19:41:45|Connect failed: Connection timed out
2021-04-05 19:48:16|Connect failed: Connection timed out
2021-04-05 19:52:16|Connect failed: Connection timed out
2021-04-05 19:56:17|Connect failed: Connection timed out

### end of file
### .DS_Store
   Bud1            %                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 @                                              @                                                @                                                @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E   %                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                             `                                                     @                                                @                                                @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
### end of file
### description
Unnamed repository; edit this file 'description' to name the repository.

### end of file
### index
DIRC      f36f36             IX$_hBQ 
.gitignore        f36f36            oGW*Tv# call_simulator.php        f36f36             Ys\3ggA% 	calls.sql f36f36            P<-~.WÎVr calls/.DS_Store   f36f36            5V|տ+fP?{^l̂ 
closecall.log     f36f36            D7>ZoyO 
config.php        f36f36            VZ?
U$o
lb' config_paths.php  f36f36            Yݴ:ĥfIZ config_worker.php f36f36            
A☖g$~_C handlers/nocall_details.php       f36f36            "bφy7Wx6J^6 handlers/test_details.php f36f36             |cth(6 readme    f36f36            Iit[.8\XkMO 
recall.log        f36f36            r0ͣ3CQ` run_file.php      f36f36            ̀n=42Z run_file_close_calls.php  f36f36            %H4:z MJJs run_file_createdetailsfiles.php   f36f36            #70_`	qnj run_file_recall.php       f36f36            DKljy
> run_file_update_sms.php   f36f36            z>DxbIѨF^o test.php  f36f36            HzjТ,OFzuE testiing/kaspi_api.php    f36f36             0y 5DQ testing.php       f36f36            w.Mfh0Z update details.sql        f36f36            sH'EL=F %worker_synteth/classes/Connection.php     f36f36            %$7er*W<+m<cz #worker_synteth/classes/Frontend.php       f36f36            *aVW׽p{k<X "worker_synteth/classes/Synteth.php        f36f36            W4ٳ!`sR3[y &worker_synteth/classes/Transcriber.php    f36f36            	[qIoPPwY "worker_synteth/run_file_worker.php        TREE    26 4
 [JUj96(Q*v6calls 1 0
 $&j0(`_handlers 2 0
E"%i]ӉvC ntestiing 1 0
q̍jg$D;;9>worker_synteth 5 1
Fշ"g0classes 4 0
8-)@Ҽfy4Ƴ_p˴#
### end of file
### HEAD
ref: refs/heads/master

### end of file
### packed-refs
# pack-refs with: peeled fully-peeled sorted 
ae2d16aaab0072490784bab4731a4c8adb4e570e refs/remotes/origin/master

### end of file
### config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:CybernetKZ/callmanager_deamons.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master

### end of file
### HEAD
0000000000000000000000000000000000000000 ae2d16aaab0072490784bab4731a4c8adb4e570e Daniil Petrov <octrow@yandex.ru> 1714665605 +0500	clone: from github.com:CybernetKZ/callmanager_deamons.git

### end of file
### HEAD
0000000000000000000000000000000000000000 ae2d16aaab0072490784bab4731a4c8adb4e570e Daniil Petrov <octrow@yandex.ru> 1714665605 +0500	clone: from github.com:CybernetKZ/callmanager_deamons.git

### end of file
### master
0000000000000000000000000000000000000000 ae2d16aaab0072490784bab4731a4c8adb4e570e Daniil Petrov <octrow@yandex.ru> 1714665605 +0500	clone: from github.com:CybernetKZ/callmanager_deamons.git

### end of file
### update.sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

### end of file
### pre-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

### end of file
### push-to-checkout.sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

### end of file
### commit-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

### end of file
### pre-push.sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

### end of file
### pre-merge-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

### end of file
### prepare-commit-msg.sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

### end of file
### pre-applypatch.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

### end of file
### pre-rebase.sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

### end of file
### pre-receive.sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

### end of file
### fsmonitor-watchman.sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

### end of file
### post-update.sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

### end of file
### applypatch-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

### end of file
### HEAD
ref: refs/remotes/origin/master

### end of file
### master
ae2d16aaab0072490784bab4731a4c8adb4e570e

### end of file
### exclude
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

### end of file
### run_file_worker.php
<?php
    $baseDir = dirname(__FILE__);
    ini_set('error_log',$baseDir.'/error.log');
    
    if (1 ){
        fclose(STDIN);
        fclose(STDOUT);
        fclose(STDERR);
        $STDIN = fopen('/dev/null', 'r');
        $STDOUT = fopen($baseDir.'/application.log', 'ab');
        $STDERR = fopen($baseDir.'/daemon.log', 'ab');    
    }
    
    $main_path_application = realpath(__DIR__ . DIRECTORY_SEPARATOR . '..' ) . DIRECTORY_SEPARATOR; 

	include $main_path_application . "worker_synteth/classes/Frontend.php";
	include $main_path_application . "worker_synteth/classes/Synteth.php";
	include $main_path_application . "worker_synteth/classes/Transcriber.php";

	$config 	   = include $main_path_application . "config.php";
	$config_path   = include $main_path_application . "config_paths.php";
	$config_worker = include $main_path_application . "config_worker.php";

	$front = new Frontend($config, $config_path, $config_worker);
	$udary = new Transcriber($front, $config_worker);

	$synte = new Synteth($front, $config_worker, $config_path);

	$show_info = $config_worker['show_info'];

	while (1 == 1){

		$batches 		= array();
		$batchesReady   = array();
        

		if ($show_info) echo "\n\033[01;31m" . date('y-m-d h:i:s') . "1. Новая итерация, шаг забираем сырые данные" . "\033[0m";

        $type = "";
        if ($front->checkSync() <> 1) {
            $batches = $front->getBatches("for_trans");
            $type    = "for_trans";
        } else {
            $batches = $front->getBatches("sync");
            $type    = "sync";
        }
		if ($show_info) echo "\n\033[01;31m" . date('y-m-d h:i:s') . "2. шаг направляем данные транскрайберам" . "\033[0m";
		$udary->send($batches, $type);

		if ($show_info) echo "\n\033[01;31m" . date('y-m-d h:i:s') . "3. шаг забираем данные в которых проставлены ударения" . "\033[0m";
		$batchesReady = $udary->getBatches();

		if ($show_info) echo "\n\033[01;31m" . date('y-m-d h:i:s') . "4. шаг направляем данные на синтез" . "\033[0m";
		$synte->send($batchesReady);

		if ($show_info) echo "\n\033[01;31m" . date('y-m-d h:i:s') . "5. шаг забираем данные, загружаем аудио файлы" . "\033[0m";
		$synte->getBatches();

		sleep(60);
	}

?>
### end of file
### Frontend.php
<?php

class Frontend
{
	var $config = "";
	var $config_paths = "";
	var $config_worker = "";


	function __construct($config, $config_paths, $config_worker)
	{
		$this->config 		  = $config;
		$this->config_paths   = $config_paths;
		$this->config_worker  = $config_worker;
	}

//  -----------------------------------------------------------------------------------------------------
	public function getVars($batch_id)
	{

		$sql = "
			SELECT 
				`request_udar`
			  FROM `xm9wl_calls_synteth_files` 
			 WHERE `batch_id` = " .  $batch_id . " limit 1";

		$link = 0;
		$flag = true;
		while ($flag) {
			$link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']);	
			if (mysqli_connect_errno()) {
				$flag = true;
				sleep(10);
			} else {
				$flag = false;
			}
		}

        mysqli_set_charset($link, "utf8");
		
        $result = mysqli_query($link, $sql);
	 	$data = mysqli_fetch_assoc($result);	
	 	$json_string = $data['request_udar'];
	 	$vars        = json_decode($json_string, true);

		$link->close();
		return $vars;
	}



	private function getVarsToSync($batch)
	{
        // 
        $main_lang    = $this->config_worker['main_lang'];
		$prefix_arr   = $this->config_worker['lang_settings'][$main_lang];

		$call_data    = json_decode($batch['vars'], true);
		$sync_collums = array_keys($this->config_paths);

		$to_generate[$batch['id']] = array();

		foreach ($call_data as $key => $value) {
			if (in_array($key, $sync_collums)) {

				$flag_exists = true;
				for ($i=0; $i < 4; $i++) { 
					$pregix = '';
					if (is_numeric($value)){
						$tmp = intval($value);
						$pregix = strval(intdiv($tmp, 100000)) . '/' . $prefix_arr[$i];
					}

					$first_file = $this->config_paths[$key]['home'][$i] . $pregix . mb_strtolower($value) . ".wav";
					//$dest_file  = $paths[$key]['dest'][$i] . $call_number . ".wav";

					if (!file_exists($first_file)) {
						$flag_exists = false;
					}
				}

				if (!$flag_exists){
					// нет синтезированного файла создать запрос на генерацию
					$to_generate[$batch['id']][$key] = $value;
				}		
			}
		}

		return $to_generate;
	}

	private function normalize($batches)
	{
		$result = array();
		foreach ($batches as $key => $batch) {
			$result = $this->getVarsToSync($batch) + $result;
		}
		return $result;
	}

//  -----------------------------------------------------------------------------------------------------

	private function createBatch($key, $batch)
	{
		$json_string = json_encode($batch, JSON_UNESCAPED_UNICODE);

		$link = 0;
		$flag = true;
		while ($flag) {
			$link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']);	
			if (mysqli_connect_errno()) {
				$flag = true;
				sleep(10);
			} else {
				$flag = false;
			}
		}
        
        $sql = "
            INSERT INTO `xm9wl_calls_synteth_files` (`batch_id`, `request`, `path_wget`) 
            VALUES (" . $key . ", '" .  mysqli_real_escape_string($link, $json_string) . "', '') 
        ";

        mysqli_set_charset($link, "utf8");

	 	mysqli_query($link, $sql);	
		$link->close();
	}

//  -----------------------------------------------------------------------------------------------------

	private function setStatusMain($batch_id, $status)
	{
		// 	sync, in_sync, new
		$sql = "
			UPDATE xm9wl_calls_batches 
			   SET status = '" . $status . "'
			WHERE status <> 'canceled'  and id = " . $batch_id ;

		$link = 0;
		$flag = true;
		while ($flag) {
			$link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']);	
			if (mysqli_connect_errno()) {
				$flag = true;
				sleep(10);
			} else {
				$flag = false;
			}
		}

        mysqli_set_charset($link, "utf8");
	 	mysqli_query($link, $sql);	
		

		if ($status == 'new'){
            
            $sql = "SELECT user_col1 
                      FROM xm9wl_calls_batches 
                     WHERE id  = " . $batch_id;

            $result = mysqli_query($link, $sql);
            $data   = mysqli_fetch_assoc($result);
            $dwh_id = $data['user_col1'];

            // echo "\n Frontend dwh_id set sync " . $data['user_col1'];

            $sql = "
                UPDATE xm9wl_calls_batches 
                   SET status = 'sync'
                 WHERE status in ('wait_sync', 'for_trans') and user_col1 = '" . $dwh_id . "'";

            mysqli_query($link, $sql);       
        }

        $link->close();

		// if ($this->config_worker['show_info']){
	 // 		echo "\nFrontend setStatusMain" .  $status;
	 // 	}
	}

//  -----------------------------------------------------------------------------------------------------    
    
    public function checkSync()
    {
        $sql  = "
            SELECT 
               1 as fl_exists
              FROM xm9wl_calls_batches
             WHERE status = 'sync'
             LIMIT 1 ";

        $link = 0;
        $flag = true;
        while ($flag) {
            $link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']); 
            if (mysqli_connect_errno()) {
                $flag = true;
                sleep(10);
            } else {
                $flag = false;
            }
        }

        $result = mysqli_query($link, $sql);
        $data   = mysqli_fetch_assoc($result);
        $fl_exists = $data['fl_exists'];    
        return $fl_exists;
    }

//  -----------------------------------------------------------------------------------------------------

	public function getBatches($type)
	{	
		$hostname = ' and user_col2 = "' . gethostname() . '" ';

		$sql  = "
			SELECT 
				id,
				vars,
				status
			  FROM xm9wl_calls_batches
			 WHERE status = '" . $type . "' "
			 . $hostname . "
			 LIMIT " . $this->config_worker['limit'];

		$link = 0;
		$flag = true;
		while ($flag) {
			$link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']);	
			if (mysqli_connect_errno()) {
				$flag = true;
				sleep(10);
			} else {
				$flag = false;
			}
		}

        mysqli_set_charset($link, "utf8");

	 	$result = mysqli_query($link, $sql);
	 	$data   = mysqli_fetch_all($result, MYSQLI_ASSOC);
	 	$link->close();

	 	$batches = $this->normalize($data);

 	 	if ($this->config_worker['show_info']){
 	 		echo "\n----------------------------------------------------------------------------------------";
 	 		echo "\n";
 	 		print_r($batches);
	 		echo "\nFrontend getBatches data count = " . count($batches);
	 	}

	 	//print_r($batches);
        if ($type == "sync"){
    	 	foreach ($batches as $key => $batch) {
    	 		if (count($batch) > 0){
    	 			$this->createBatch($key, $batch);
    	 			$this->setStatusMain($key, "in_sync");
    	 		} else {
    	 			unset($batches[$key]);
    	 			$this->setStatusMain($key, "new");
    	 		}
    	 	}
        } else {
            foreach ($batches as $key => $batch) {
                if (count($batch) == 0){
                    unset($batches[$key]);
                }
                $this->setStatusMain($key, "wait_sync");
            }
        }

		return $batches;
	}


//  ----------------------------------------------------------------------------------------------------
//  ----------------------------------------------------------------------------------------------------
//  ----------------------------------------------------------------------------------------------------

	public function setStatus($status, $batch)
	{
		$link = 0;
		$flag = true;
		while ($flag) {
			$link = mysqli_connect($this->config['host'], $this->config['username'], $this->config['password'], $this->config['database']);	
			if (mysqli_connect_errno()) {
				$flag = true;
				sleep(10);
			} else {
				$flag = false;
			}
		}
        
        if ($status == 'transcribered'){

            $sql = "
                UPDATE xm9wl_calls_synteth_files 
                   SET `status`                 = '" . $status . "'
                   ,   `request_udar`           = '" . mysqli_real_escape_string($link,
                                                            json_encode($batch['vars'], JSON_UNESCAPED_UNICODE)) . "'
                   ,   `transcriber_datetime`   = now()
                WHERE batch_id = " . $batch['batch_id'];
    
        } else if ($status == 'syntethed') {

            $sql = "
                UPDATE xm9wl_calls_synteth_files 
                   SET `status`                 = '" . $status . "'
                   ,   `synteth_datetime`       = now()
                   ,   `path_wget`              = '" . $batch['path_zip'] . "'
                WHERE batch_id = " . $batch['batch_id'];
        
        }

        mysqli_set_charset($link, "utf8");
	 	mysqli_query($link, $sql);	
		$link->close();

		if ($status == 'syntethed'){
			$this->setStatusMain($batch['batch_id'], "new");
		}

		if ($this->config_worker['show_info']){
			echo "\nFrontend setStatus data status = " . $status;
		}
	}

}


?>
### end of file
### Transcriber.php
<?php

class Transcriber
{
	var $front  		= "";
	var $config_worker  = "";
	var $host   		= "";
	var $url    		= "";
	var $show_info 		= false;
	var $method         = "POST";

    var $con            = "";

	function __construct($front, $config_worker)
	{
		$this->front  		 = $front;
		$this->config_worker = $config_worker;
		$this->host          = $this->config_worker['host'];
		$this->url           = $this->config_worker['url_transcriber'];
		$this->show_info     = $this->config_worker['show_info'];


        include_once "Connection.php";
        $this->con = new Connection("Transciber");
	}

	public function send($batches, $type)
	{
		if (count($batches) == 0) return 1;

		$sended   = true;
        $homehost = ($type == 'sync') ? $this->host : 'only_transcriber';
		while ($sended){
			
			$json_string = json_encode($batches, JSON_UNESCAPED_UNICODE);

			$postdata = array( 
                'ssl' => array(
                    'verify_peer' => false,
                    'verify_peer_name' => false),
                'http' => array(
    	        	'method'  => $this->method,
    		        'header'  => 'Content-Type: application/json',
    		        'content' => '{ "type": "create", "host":"' . $homehost . '", "data":' . $json_string  . '}'));

			$context  = stream_context_create( $postdata );
            
            $result   = $this->con->getBatches($this->url, $context);

			if ($result == '{"type":"success"}'){
				$sended = false;
			} else {
				sleep(60);
			}
		}		

		if ($this->show_info){
			echo "\n-----------------------------------------------------------------------------------------------";
	 		echo "\nTransciber send data count = " . count($batches);
	 		print_r($sended);
	 	}

	}

	public function getBatches()
	{

		$postdata = array(
            'ssl' => array(
                    'verify_peer' => false,
                    'verify_peer_name' => false),
            'http' => array(
	        	'method'  => $this->method,
		        'header'  => 'Content-Type: application/json',
		        'content' => '{ "type": "getList", "host":"' . $this->host . '"}'));

		$context  = stream_context_create($postdata);

        $result   = $this->con->getBatches($this->url, $context);

		$batches = json_decode($result, true); // to array

		$sync_batch_ids = array();
	 	foreach ($batches as $key => $batch) {
	 		$sync_batch_ids[] = $batch['id'];
	 		$this->front->setStatus('transcribered', $batch);
	 	}
	 	
	 	echo "\n" . date('y-m-d h:i:s') . ' данные получены ';
	 	echo "\n" . date('y-m-d h:i:s') . ' пытаюсь проставить статус ';

	 	$this->setStatus($sync_batch_ids);

		if ($this->show_info){
	 		echo "\nTransciber send data count = " . count($batches);
	 		echo "\n";
	 		print_r($batches);
	 	}

	 	return $batches;
	}

	public function setStatus($sync_batch_ids)
	{
		if (count($sync_batch_ids) == 0) return 0;

		$json_string = json_encode($sync_batch_ids, JSON_UNESCAPED_UNICODE);

		$postdata = array(
            'ssl' => array(
                    'verify_peer' => false,
                    'verify_peer_name' => false),
            'http' => array(
	        	'method'  => $this->method,
		        'header'  => 'Content-Type: application/json',
		        'content' => '{ "type": "setStatus", "host":"' . $this->host . '", "data":' . $json_string . '}'));

		$context  = stream_context_create( $postdata );

        $result   = $this->con->getBatches($this->url, $context);

		if ($this->show_info){
	 		echo "\nTransciber setStatus data count = " . count($sync_batch_ids);
	 		echo $result;
	 	}
		
	}

}


?>
### end of file
### Synteth.php
<?php

class Synteth
{
	var $config_worker = "";
	var $config_paths  = "";

	var $front         = "";
	var $host          = "";
	var $url    	   = "";
    var $urls          = "";

	var $show_info     = "";
	var $create        = "";
	var $method        = "GET";

    var $iter          = 0;
    var $con           = 0;

	function __construct($front, $config_worker, $config_paths)
	{
		$this->config_worker = $config_worker;
		$this->config_paths  = $config_paths;

		$this->front         = $front;

		$this->urls    		 = $this->config_worker['url_synteth'];
        $this->url           = $this->urls[$this->iter];

		$this->host   		 = $this->config_worker['host'];
		$this->show_info 	 = $this->config_worker['show_info'];

		$this->type['create'] 		 = "create";
		$this->type['getList']       = "getList";
		$this->type['setStatus']     = "setStatus";

        include_once "Connection.php";
        $this->con = new Connection("Synteth");

	}





//  ---------------------------------------------------------------------------------------------------------------------
//  Пример запроса
	// $batchesReady[0] = array
 //        (
 //            "id" => 1,
 //            "batch_id" => 688570,
 //            "vars" => Array
 //                (
 //                    "rl_inputAmount" => Array
 //                        (
 //                            "text" => 151,
 //                            "prime" => 151,
 //                            "result" => 151
 //                        ),

 //                    "rl_clientName" => Array
 //                        (
 //                            "text" => "Иван Иванов",
 //                            "prime" => "иван Иванов",
 //                            "result" => "ив+ан Ив+анов"
 //                        ),

 //                    "rl_thirdPersonName" => Array
 //                        (
 //                            "text" => "Кайрат Оспанов",
 //                            "prime" => "гайрат Оспанов",
 //                            "result" => "гайр+ат Осп+анов"
 //                        )

 //                )
 //        );
// {
//  "type":"create",
//	"host":"test",
//  "data":{
// 				385385:{"text":"danik", "prime":"danik", "result":"dan+ik"}
// 			}
// }	

	public function send($data)
	{
        $this->url  = $this->urls[$this->iter];
        $this->iter = ($this->iter + 1) % count($this->urls);

//  подготовить данные к формату синтеза
//  нормализация 
		if (count($data) == 0) return 0;

		$prepare = array();
		foreach ($data as $key => $value) {
			$prepare[$value['batch_id']] = $value['vars'];
		}

		$json_string = json_encode($prepare, JSON_UNESCAPED_UNICODE);
	
		$postdata = array('http' =>
	   		array(
	        	'method'  => $this->method,
		        'header'  => 'Content-Type: application/json',
		        'content' => '{ "type": "' . $this->type['create'] . '", "host":"' . $this->host . '", "data":' . $json_string . '}'));

		$context  = stream_context_create( $postdata );

        $result = $this->con->getBatches($this->url, $context);

		//$batches = json_decode($result, true);

		if ($this->show_info){
	 		echo "\nSynteth send data count = " . count($data);
	 		print_r($result);
	 	}
	}

//  --------------------------------------------------------------------------------------------------------------------
//  --------------------------------------------------------------------------------------------------------------------
//  --------------------------------------------------------------------------------------------------------------------
//  1 забрать данные пути +
//  3 скачать и распоковать аудио записи
//  4 ответить хосту об успешных загрузках +
//	2 сохранить статус и путь +


//  -------------------------------------------------------------------------------------------------------------------
	public function getBatches()
	{

		$postdata = array('http' =>
	   		array(
	        	'method'  =>  $this->method,
		        'header'  => 'Content-Type: application/json',
		        'content' => '{ "type": "' . $this->type['getList'] . '", "host":"' . $this->host . '"}'));

		$context  = stream_context_create( $postdata );

        $result = $this->con->getBatches($this->url, $context);

		$batches  = json_decode($result, true);

		//  [{"id":"1","batch_id":"1234", "path_zip":"sours/1234.zip"}, 
	 	//					{"id":"2","batch_id":"1235", "path_zip":"sours/1235.zip"}]
		//
		$batches = $batches['list'];
	
		$synteth_ids = array();
		foreach ($batches as $key => $batch) {

			$synteth_ids[] = $batch['batch_id'];

			$this->upload($batch);
			$this->front->setStatus("syntethed", $batch);

		}
		
		$this->setStatus($synteth_ids);

		if ($this->show_info){
	 		echo "\nSynteth send data count = " . count($batches);
	 		print_r($batches);
	 	}

	}

//  --------------------------------------------------------------------------------------------------------------------
//  --------------------------------------------------------------------------------------------------------------------
//  --------------------------------------------------------------------------------------------------------------------

	private function uploadFileAndUnzip($batch)
	{

		$content       = file_get_contents($batch['path_zip']);

		$uploadPath    = $this->config_worker['temp_audio'] . "/";
		$uploadFile    = $this->config_worker['temp_audio'] . "/" . $batch['batch_id'] . ".zip";

		file_put_contents($uploadFile, $content);


		$zip = new ZipArchive;
		$res = $zip->open($uploadFile);
		
		if ($res === TRUE) {
			$zip->extractTo($uploadPath);
			$zip->close();
		} else {
			echo 'net file ili chto to poshlo ne tak';
		}

		// удалить архив
		$command = 'rm -f "' . $uploadFile . '"';
		shell_exec($command);
	}


	private function transferFiles($batch)
	{
		
		$varibles          = $this->front->getVars($batch['batch_id']);

		$upload_folder     = $this->config_worker['temp_audio'] . "/" . $batch['batch_id']; 

        // язык выбор префикса
        $main_lang         = $this->config_worker['main_lang'];
        $array_gender_lang = $this->config_worker['array_gender_lang'][$main_lang];
		
		foreach ($varibles as $var_name => $dataTranscribers) {
		
			foreach ($array_gender_lang as $key => $prefix) {

				$pregix_number = '';
				if (is_numeric($dataTranscribers['text'])){
					$tmp = intval($dataTranscribers['text']);
					$pregix_number = strval(intdiv($tmp, 100000)) . '/' . $prefix . '_';

					if (!file_exists($this->config_paths[$var_name]['home'][$key] . strval(intdiv($tmp, 100000)) . '/' )){
						$command = 'mkdir -p "' . $this->config_paths[$var_name]['home'][$key] . strval(intdiv($tmp, 100000))  . '/' . '"';
						shell_exec($command);
						$command = "";
					}
				}

                // $prefix  = "";
                $from    = "";

                if ($main_lang == "kz"){
                
                    $kazahh         = array("ә", "ө", "қ", "ү", "ұ", "ғ", "ң", "і", "һ");
                    $flag_exists    = 0;
                    foreach ($kazahh as $key2 => $char) {
                        if (mb_strpos($dataTranscribers['result'], $char) === false)
                            $flag_exists = $flag_exists + 0;
                        else{
                            $flag_exists = $flag_exists + 1;
                        }
                    }

                    if ($flag_exists > 0) {
                        $prefix  = str_replace("ru", "kz" ,$prefix);
                        $from    = $upload_folder  . "/" . $var_name . "/" . $prefix . "/" . $dataTranscribers['text'] . ".wav";    
                    } else {
                        $prefix  = str_replace("kz", "ru" ,$prefix);
                        $from    = $upload_folder  . "/" . $var_name . "/" . $prefix . "/" . $dataTranscribers['text'] . ".wav";
                    }

                } elseif ($main_lang == "uz"){
                    if (preg_match('/[А-Яа-я]/ui', $dataTranscribers['result'])){
                        $prefix  = str_replace("uz", "ru" ,$prefix);
                    } else {
                        $prefix  = str_replace("ru", "uz" ,$prefix);
                    }

                    $from    = $upload_folder  . "/" . $var_name . "/" . $prefix . "/" . $dataTranscribers['text'] . ".wav";
                
                } elseif ($main_lang == "kg"){

                    $prefix  = str_replace("ru", "kg" ,$prefix);
                    $from    = $upload_folder  . "/" . $var_name . "/" . $prefix . "/" . $dataTranscribers['text'] . ".wav";
                
                }


				$to      = $this->config_paths[$var_name]['home'][$key] . $pregix_number . mb_strtolower($dataTranscribers['text']) . ".wav";
				
				$command = 'cp -f "' . $from . '" "' . $to . '"';
				shell_exec($command);
			}
		}

		// delete folder after coping
		$command = 'rm -rf "' . $upload_folder . '"';
		shell_exec($command);
	}
	

	private function upload($batch)
	{
		//$vars = $this->front->getVars($batch['batch_id']);
		$this->uploadFileAndUnzip($batch);

		$this->transferFiles($batch);

	}



//  ------------------------------------------------------------------------------------------------------------------------------
//  ------------------------------------------------------------------------------------------------------------------------------
//  ------------------------------------------------------------------------------------------------------------------------------
//  ------------------------------------------------------------------------------------------------------------------------------

	public function setStatus($synteth_ids)
	{
		if (count($synteth_ids) == 0) return 0;

		$json_string = json_encode($synteth_ids, JSON_UNESCAPED_UNICODE);

		$postdata = array('http' =>
	   		array(
	        	'method'  =>  $this->method,
		        'header'  => 'Content-Type: application/json',
		        'content' => '{ "type": "setStatus", "host":"' . $this->host . '", "data":' . $json_string . '}'));

		$context  = stream_context_create( $postdata );
        
        $result = $this->con->getBatches($this->url, $context);

		if ($this->show_info){
	 		echo "\nSynteth setStatus data count = " . count($synteth_ids);
	 		echo "\n" . $result;
	 	}
		
	}

}


?>
### end of file
### Connection.php
<?php
   /**
    * 
    */
   class Connection
   {
        var $server_name = "";
        var $try_counter  = 0;

        function __construct($server_name)
        {
            $this->server_name = $server_name;
        }

        public function getBatches($url, $context){
            $flag   = true;
            $result = '';

            while ($flag == true)
            {
                $result = file_get_contents($url, false, $context);

                $status_line = $http_response_header[0];

                preg_match('{HTTP\/\S*\s(\d{3})}', $status_line, $match);

                $status = $match[1];

                if ($status !== "200") {

                    if ($this->try_counter == 0){
                        $this->try_counter++;
                        echo date('H:i:s') . ' ne mozhet podluchitya k ' . $this->server_name;
                    }

                    sleep(60);

                } else {
                    $flag = false;
                    $this->try_counter = 0;
                }
            }

            return $result;
        }
   }

?>
### end of file
### kaspi_api.php
<?php
include('../handlers/test_details.php');

$array = array('vars'=>'{"rl_clientName":"dandan", "rl_inputAmount":"15424", "rl_inputAmount":"15424"}'
                ,'phone_number'=>'7071234567'
                ,'voice_datetime'=>'2022-02-01 15:15:15'
                ,'def_try'=> 60
                ,'try'=> 15
                ,'user_col1'=>'kwn_nsadf_dafsdflkj'
                ,'blanguage'=>'ru'
                ,'btype'=>'soft_script'
                ,'PAYMENT_TIME'=>'сегодня'
                ,'CHANNEL' => 'SOFT'
                ,'DELAY_REASON' => 'delay'
                ,'RESULT_VERIFICATION' => 'relative'
            );

send_request($array);

echo 1;
### end of file
### nocall_details.php
<?php
    
//  ----------------------------------------------------------------------------------

    function prepare_data($data_details){
        $call_info = json_decode($data_details['vars'], true);
        $client_name = explode(' ', $call_info['rl_clientName']);

        $k = strpos($data_details['user_col1'], '_');
        
        $segment_mapping = array('pre_script_kaspi'    => 'Напоминание НБ',
                                 'pre_script_kaspi_2'  => 'Напоминание НБ ДД',
                                 'start_script_kaspi'  => '1-2 НБ',
                                 'soft_script_kaspi'   => '1-2 Kaspi Red',
                                 'hard_script_kaspi'   => 'hard',
                                 '3party_script_kaspi' => '3d party');

        $call_direction  = array('pre_script_kaspi'    => '1',
                                 'pre_script_kaspi_2'  => '1',
                                 'start_script_kaspi'  => '1',
                                 'soft_script_kaspi'   => '1',
                                 'hard_script_kaspi'   => '1',
                                 '3party_script_kaspi' => '0');

        $channelType = ($data_details['btype'] == 'pre_script_kaspi'
                            or $data_details['btype'] == 'pre_script_kaspi_2') ? "PRE" : "SOFT";

        $result = array(
            "callSystem"                        => "Cybernet",
            "phone"                             => substr_replace($data_details['phone_number'], "8", 0, 1),
            "name"                              => $client_name[0],
            "patronym"                          => isset($client_name[1])?$client_name[1]:"",
            "synthesisNamePatronym"             => $call_info['rl_clientName'],
            "summ"                              => $call_info['rl_inputAmount'],
            //"callRecord"                        => "None",
            "callTranscript"                    => "None",
            "callStartTime"                     => $data_details['voice_datetime'],
            "status"                            => "no answer",
            "duration"                          => "0",
            "attempt"                           => $data_details['def_try'] - $data_details['try'],
            "result"                            => "no answer",
            //"answeredName"                      => "None",
            "uuid"                              => "None",
            "dwhId"                             => substr($data_details['user_col1'], $k + 1),
            "lang"                              => $data_details['blanguage'],
            "segment"                           => $segment_mapping[$data_details['btype']],
            "CallDirection"                     => $call_direction[$data_details['btype']],
            //"name3rdPerson"                     => "None",
            "resultVerification"                => "None",
            //"debtorFullName"                    => "None",
            "synthesis3rdPersonNameAndPatron"   => "None",
            "companyId"                         => "None",
            "contractId"                        => "None",
            "channelType"                       => $channelType,
            "paymentTime"                       => "None",
            "problem"                           => "None",
            
            // "answeredPatron"                    => "None",
            // "guid"                              => "None",
            // "sumThousandsExistance"             => "None",
            // "sumHundredsExistance"              => "None",
            // "sum199Existance"                   => "None",
            // "nameExistance"                     => "None",
            // "patronymExistance"                 => "None"
        );

      

        return $result;        
    }

    function send_request($details){
        $data = json_encode(prepare_data($details), JSON_UNESCAPED_UNICODE);

        $postdata = array('http' =>
                        array(
                            'method'  => 'POST',
                            'header'  => 'Content-Type: application/json',
                            'content' => $data));

        $context = stream_context_create($postdata);

        $url = 'http://194.187.246.32:27415/Dwh_CallResult_Send_Ws/sendCyberCallResult';

        // testing url after testing need comment
        //$url = 'http://194.187.246.31:27415/Dwh_CallResult_Send_Ws/sendCyberCallResult';        

        $result = file_get_contents($url, false, $context);
        
        return $result;    
        //print_r($result);
    }
?>
### end of file
### test_details.php
<?php
    
//  ----------------------------------------------------------------------------------

    function prepare_data($data_details){
        $call_info = json_decode($data_details['vars'], true);
        $client_name = explode(' ', $call_info['rl_clientName']);

        $k = strpos($data_details['user_col1'], '_');

        $result = array(
            "callSystem"                        => "Cybernet",
            "phone"                             => $data_details['phone_number'],
            "name"                              => $client_name[0],
            "patronym"                          => isset($client_name[1])?$client_name[1]:"",
            "synthesisNamePatronym"             => $call_info['rl_clientName'],
            "summ"                              => $call_info['rl_inputAmount'],
            //"callRecord"                        => "None",
            "callTranscript"                    => "None",
            "callStartTime"                     => $data_details['voice_datetime'],
            "status"                            => "no answer",
            "duration"                          => "0",
            "attempt"                           => $data_details['def_try'] - $data_details['try'],
            "result"                            => "None",
            //"answeredName"                      => "None",
            "uuid"                              => "None",
            "dwhId"                             => substr($data_details['user_col1'], $k + 1),
            "lang"                              => $data_details['blanguage'],
            "segment"                           => $data_details['btype'],
            "CallDirection"                     => "None",
            //"name3rdPerson"                     => "None",
            "resultVerification"                => "None",
            //"debtorFullName"                    => "None",
            "synthesis3rdPersonNameAndPatron"   => "None",
            "companyId"                         => "None",
            "contractId"                        => "None",
            "channelType"                       => "None",
            "paymentTime"                       => "None",
            "problem"                           => "None"
            // "answeredPatron"                    => "None",
            // "guid"                              => "None",
            // "sumThousandsExistance"             => "None",
            // "sumHundredsExistance"              => "None",
            // "sum199Existance"                   => "None",
            // "nameExistance"                     => "None",
            // "patronymExistance"                 => "None"
        );

      

        return $result;        
    }

    function send_request($details){
        $data = json_encode(prepare_data($details), JSON_UNESCAPED_UNICODE);

        $postdata = array('http' =>
                        array(
                            'method'  => 'POST',
                            'header'  => 'Content-Type: application/json',
                            'content' => $data));

        $context = stream_context_create($postdata);

        $url = 'http://194.187.246.32:27415/Dwh_CallResult_Send_Ws/sendCyberCallResult';

        // testing url after testing need comment
        // $url = 'http://194.187.246.31:27415/Dwh_CallResult_Send_Ws/sendCyberCallResult';        

        $result = file_get_contents($url, false, $context);
            
        print_r($result);
    }
?>
### end of file
